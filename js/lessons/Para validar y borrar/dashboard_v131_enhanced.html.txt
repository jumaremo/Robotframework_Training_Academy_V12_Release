<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>📊 RF Academy - Dashboard v13.1 ENHANCED PROMPT UNIVERSAL SYNC</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #2563eb;
            --success: #16a34a;
            --warning: #d97706;
            --error: #dc2626;
            --background: #f8fafc;
            --surface: #ffffff;
            --text: #1e293b;
            --text-muted: #64748b;
            --border: #e2e8f0;
            --border-strong: #cbd5e1;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--background);
            color: var(--text);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px;
            background: var(--surface);
            color: var(--text);
            border-radius: 16px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            border: 2px solid var(--primary);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .card {
            background: var(--surface);
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            border: 1px solid var(--border);
        }

        .card h2 {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .stats-overview {
            grid-column: 1 / -1;
            background: var(--surface);
            color: var(--text);
            margin-bottom: 20px;
            border: 2px solid var(--primary);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }

        .stat-item {
            text-align: center;
            padding: 15px;
            background: var(--background);
            border-radius: 8px;
            border: 1px solid var(--border);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 5px;
            color: var(--primary);
        }

        .stat-label {
            opacity: 0.8;
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: var(--border);
            border-radius: 10px;
            overflow: hidden;
            margin-top: 10px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), #3b82f6);
            transition: width 0.5s ease;
        }

        .input-section {
            background: var(--surface);
            color: var(--text);
            border: 2px solid var(--primary);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }

        .form-input {
            padding: 12px;
            border: 2px solid var(--border);
            border-radius: 8px;
            background: var(--surface);
            color: var(--text);
            font-size: 14px;
        }

        .form-input::placeholder {
            color: var(--text-muted);
        }

        .form-input:focus {
            border-color: var(--primary);
            outline: none;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
            border: 2px solid var(--primary);
        }

        .btn-primary:hover {
            background: #1d4ed8;
            border-color: #1d4ed8;
            transform: translateY(-1px);
        }

        .lessons-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .lesson-card {
            background: var(--surface);
            border-radius: 8px;
            padding: 20px;
            border: 1px solid var(--border);
            transition: all 0.3s ease;
        }

        .lesson-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }

        .lesson-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .lesson-id {
            font-weight: 700;
            font-size: 1.2rem;
            color: var(--primary);
        }

        .lesson-status {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-excellent {
            background: rgba(22, 163, 74, 0.1);
            color: var(--success);
        }

        .status-good {
            background: rgba(217, 119, 6, 0.1);
            color: var(--warning);
        }

        .status-needs-work {
            background: rgba(220, 38, 38, 0.1);
            color: var(--error);
        }

        .lesson-metrics {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 10px;
        }

        .metric {
            text-align: center;
            padding: 8px;
            background: var(--background);
            border-radius: 6px;
        }

        .metric-value {
            font-size: 1.2rem;
            font-weight: 700;
            margin-bottom: 2px;
        }

        .metric-value.excellent { color: var(--success); }
        .metric-value.good { color: var(--warning); }
        .metric-value.needs-work { color: var(--error); }

        .metric-label {
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        .v131-indicator {
            background: var(--primary);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-top: 10px;
            text-align: center;
        }

        .level-indicator {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-top: 5px;
            text-align: center;
        }

        .level-beginner {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
        }

        .level-intermediate {
            background: rgba(251, 146, 60, 0.1);
            color: #d97706;
        }

        .level-advanced {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        .milestones {
            background: var(--surface);
            color: var(--text);
            border: 2px solid var(--primary);
        }

        .milestone-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            background: var(--background);
            border-radius: 8px;
            border: 1px solid var(--border);
        }

        .milestone-status {
            padding: 6px 12px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .milestone-completed { background: rgba(22, 163, 74, 0.8); }
        .milestone-current { background: rgba(37, 99, 235, 0.8); }
        .milestone-pending { background: rgba(107, 114, 128, 0.6); }

        .integration-status {
            grid-column: 1 / -1;
            background: var(--surface);
            color: var(--text);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            border: 2px solid var(--primary);
        }

        .prompt-universal-alert {
            grid-column: 1 / -1;
            background: var(--surface);
            color: var(--text);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            text-align: center;
            border: 2px solid var(--primary);
        }

        .batch-summary {
            grid-column: 1 / -1;
            background: var(--surface);
            border: 2px solid var(--primary);
        }

        .batch-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .batch-item {
            padding: 15px;
            background: var(--background);
            border-radius: 8px;
            border-left: 4px solid var(--primary);
        }

        .export-section {
            margin-top: 30px;
            padding: 20px;
            background: var(--surface);
            color: var(--text);
            border-radius: 12px;
            border: 2px solid var(--primary);
        }

        .notifications {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .notification {
            background: var(--success);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .quick-import-section {
            margin-bottom: 30px;
            padding: 20px;
            background: var(--background);
            border-radius: 8px;
            border: 1px solid var(--border);
        }

        details {
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 0;
            transition: all 0.3s ease;
        }

        details[open] {
            background: var(--background);
        }

        summary {
            list-style: none;
            padding: 15px;
            cursor: pointer;
            user-select: none;
            transition: all 0.3s ease;
        }

        summary:hover {
            background: var(--background);
        }

        summary::-webkit-details-marker {
            display: none;
        }

        summary::before {
            content: '▼';
            float: right;
            transform: rotate(-90deg);
            transition: transform 0.3s ease;
        }

        details[open] summary::before {
            transform: rotate(0deg);
        }

        @media (max-width: 768px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .lessons-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📊 Robot Framework Academy</h1>
            <p>Dashboard v13.1 ENHANCED - PROMPT UNIVERSAL SYNC</p>
        </div>

        <!-- Prompt Universal Alert -->
        <div class="prompt-universal-alert">
            <h2>🎯 ENHANCED: Dashboard Sincronizado con Prompt Universal v13.1</h2>
            <p><strong>Compatible con:</strong> "Generar lección XXX usando curriculum-data.js y template simple"</p>
            <p>✅ Importación rápida por lotes | ✅ Auto-importación del Validador | ✅ Exportación avanzada | ✅ Gestión completa</p>
        </div>

        <!-- Integration Status -->
        <div class="integration-status">
            <h2>🎯 Estado de Integración PROMPT UNIVERSAL v13.1 ENHANCED</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number" id="v131Compliance">0%</div>
                    <div class="stat-label">Compliance Universal</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="avgV131Score">0%</div>
                    <div class="stat-label">Score Promedio</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="autoImportedLessons">0</div>
                    <div class="stat-label">Auto-importadas</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="promptUniversalReady">✅</div>
                    <div class="stat-label">Prompt Universal</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="batchesCompleted">0</div>
                    <div class="stat-label">Lotes Completados</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="enhancedFeatures">ON</div>
                    <div class="stat-label">Enhanced Features</div>
                </div>
            </div>
        </div>

        <!-- Overview Stats -->
        <div class="card stats-overview">
            <h2>🎯 Estado Global</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number" id="totalCompleted">0</div>
                    <div class="stat-label">Lecciones Completadas</div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill" style="width: 0%"></div>
                    </div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="avgScore">0%</div>
                    <div class="stat-label">Score Promedio</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="avgTime">0</div>
                    <div class="stat-label">Min/Lección</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="efficiency">0%</div>
                    <div class="stat-label">Eficiencia Universal</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="totalTime">0</div>
                    <div class="stat-label">Horas Invertidas</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="estimatedCompletion">-</div>
                    <div class="stat-label">Completion Estimado</div>
                </div>
            </div>
        </div>

        <div class="main-grid">
            <!-- Enhanced Input Section -->
            <div class="card input-section">
                <h2>📝 Agregar Lección</h2>
                
                <!-- Quick Import Section -->
                <div class="quick-import-section">
                    <h3 style="margin-bottom: 15px;">⚡ Importación Rápida por Lotes (2 formatos)</h3>
                    <div class="form-group">
                        <label>Pegar datos de lecciones (una por línea) - Formato compacto o tradicional:</label>
                        <textarea 
                            id="quickImportText" 
                            class="form-input" 
                            rows="4" 
                            placeholder="FORMATO COMPACTO (NUEVO):&#10;L004: 96% | 28min | 1iter | 0issues | PROMPT UNIVERSAL 85%+&#10;L005: 94% | 42min | 1iter | 0issues | Template simple&#10;&#10;FORMATO ORIGINAL:&#10;Lección: 006 | Score: 98 | Tiempo: 25 | Iteraciones: 1 | Issues: 0 | Notas: Perfecto"
                            style="height: 100px; font-family: monospace; font-size: 13px;"
                        ></textarea>
                    </div>
                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                        <button type="button" class="btn btn-primary" onclick="processQuickImport()">🚀 Procesar (2 formatos)</button>
                        <button type="button" class="btn btn-primary" onclick="clearQuickImport()">🗑️ Limpiar</button>
                        <button type="button" class="btn btn-primary" onclick="showImportExample()">💡 Ejemplos</button>
                    </div>
                    <div id="importPreview" style="margin-top: 15px; display: none;">
                        <!-- Preview will be shown here -->
                    </div>
                </div>

                <!-- Manual Form -->
                <details style="margin-bottom: 20px;">
                    <summary style="cursor: pointer; font-weight: 600; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 6px;">📝 Agregar Lección Individual (Manual)</summary>
                    <form id="lessonForm" style="margin-top: 15px;">
                        <div class="form-row">
                            <div class="form-group">
                                <label>Lección ID</label>
                                <input type="number" id="lessonId" class="form-input" placeholder="001" min="1" max="251" required>
                            </div>
                            <div class="form-group">
                                <label>Score Universal (%)</label>
                                <input type="number" id="lessonScore" class="form-input" placeholder="85" min="0" max="100" required>
                            </div>
                            <div class="form-group">
                                <label>Tiempo (min)</label>
                                <input type="number" id="lessonTime" class="form-input" placeholder="25" min="1" required>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label>Iteraciones</label>
                                <input type="number" id="lessonIterations" class="form-input" placeholder="1" min="1" required>
                            </div>
                            <div class="form-group">
                                <label>Issues</label>
                                <input type="number" id="lessonIssues" class="form-input" placeholder="0" min="0" required>
                            </div>
                            <div class="form-group">
                                <label>Notas Universal</label>
                                <input type="text" id="lessonNotes" class="form-input" placeholder="PROMPT UNIVERSAL: 85%+ | Template simple">
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary">➕ Agregar Universal</button>
                    </form>
                </details>

                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <button type="button" class="btn btn-primary" onclick="importSampleData()">📊 Datos Ejemplo</button>
                    <button type="button" class="btn btn-primary" onclick="exportData()">💾 Exportar</button>
                    <button type="button" class="btn btn-primary" onclick="clearAllData()">🗑️ Limpiar Todo</button>
                    <button type="button" class="btn btn-primary" onclick="checkAutoImport()">🔄 Check Auto-Import</button>
                </div>
            </div>

            <!-- Enhanced Milestones -->
            <div class="card milestones">
                <h2>🏆 Hitos del Proyecto</h2>
                
                <div class="milestone-item">
                    <div>
                        <strong>Sección 1 (001-015)</strong><br>
                        <small>Setup del entorno - 85%+</small>
                    </div>
                    <div class="milestone-status milestone-pending" id="section1Status">0/15</div>
                </div>
                
                <div class="milestone-item">
                    <div>
                        <strong>Nivel Básico (001-066)</strong><br>
                        <small>Fundamentos - 85%+</small>
                    </div>
                    <div class="milestone-status milestone-pending" id="beginnerStatus">0/66</div>
                </div>
                
                <div class="milestone-item">
                    <div>
                        <strong>Nivel Intermedio (067-189)</strong><br>
                        <small>Técnicas avanzadas - 85%+</small>
                    </div>
                    <div class="milestone-status milestone-pending" id="intermediateStatus">0/123</div>
                </div>
                
                <div class="milestone-item">
                    <div>
                        <strong>Nivel Avanzado (190-251)</strong><br>
                        <small>Enterprise patterns - 85%+</small>
                    </div>
                    <div class="milestone-status milestone-pending" id="advancedStatus">0/62</div>
                </div>
            </div>
        </div>

        <!-- Enhanced Batch Summary -->
        <div class="card batch-summary">
            <h2>📦 Resumen por Lotes ENHANCED</h2>
            <p>Agrupación automática en lotes de 3 lecciones para tracking optimizado</p>
            <div class="batch-grid" id="batchGrid">
                <!-- Batches will be generated here -->
            </div>
        </div>

        <!-- Enhanced Lessons Grid -->
        <div class="card">
            <h2>📚 Lecciones PROMPT UNIVERSAL Completadas</h2>
            <div class="lessons-grid" id="lessonsGrid">
                <!-- Lessons will be populated here -->
            </div>
        </div>

        <!-- Enhanced Export Section -->
        <div class="export-section">
            <h2>📋 Exportar Datos ENHANCED</h2>
            <p>Exporta tu progreso con formatos avanzados compatibles con PROMPT UNIVERSAL v13.1:</p>
            <div style="display: flex; gap: 15px; margin-top: 15px; flex-wrap: wrap;">
                <button class="btn btn-primary" onclick="exportToCSV()">📊 Exportar CSV</button>
                <button class="btn btn-primary" onclick="exportToJSON()">💾 Exportar JSON</button>
                <button class="btn btn-primary" onclick="generateReport()">📄 Generar Reporte</button>
                <button class="btn btn-primary" onclick="exportForValidador()">🔍 Export Validador</button>
                <button class="btn btn-primary" onclick="exportBatchSummary()">📦 Export Lotes</button>
            </div>
        </div>
    </div>

    <!-- Notifications -->
    <div class="notifications" id="notifications"></div>

    <script>
        // Global data storage - Compatible with PROMPT UNIVERSAL v13.1 ENHANCED
        let lessonsData = JSON.parse(localStorage.getItem('rfAcademyLessonsV131')) || [];
        let autoImportedCount = 0;

        // Enhanced curriculum integration for titles and metadata
        const curriculumTitles = {
            1: 'Introducción a Robot Framework',
            2: 'Instalación de Python y Robot Framework', 
            3: 'Configuración de Visual Studio Code',
            4: 'Extensiones esenciales para VS Code',
            5: 'Creación del primer proyecto',
            6: 'Estructura de directorios y buenas prácticas',
            7: 'Configuración del navegador web',
            8: 'WebDrivers y gestión de dependencias',
            9: 'Variables de entorno y configuración',
            10: 'Debugging y herramientas de desarrollo',
            11: 'Control de versiones con Git',
            12: 'Configuración de requirements.txt',
            13: 'Ejecución de pruebas desde línea de comandos',
            14: 'Generación de reportes básicos',
            15: 'Troubleshooting de instalación común'
            // Add more as needed
        };

        // PROMPT UNIVERSAL v13.1 ENHANCED - Unified thresholds (85%+ for all levels)
        function getPromptUniversalExpectedScore(lessonId) {
            // UNIFIED: All levels use 85%+ for PROMPT UNIVERSAL compatibility
            return 85;
        }

        function getLessonLevel(lessonId) {
            if (lessonId >= 1 && lessonId <= 66) return 'beginner';
            if (lessonId >= 67 && lessonId <= 189) return 'intermediate';
            if (lessonId >= 190 && lessonId <= 251) return 'advanced';
            return 'beginner';
        }

        // Initialize dashboard ENHANCED
        function initDashboard() {
            updateOverviewStats();
            updateV131Stats();
            renderLessons();
            renderBatches();
            updateMilestones();
            checkAutoImportedLessons();
        }

        // Check for auto-imported lessons from Validador ENHANCED
        function checkAutoImportedLessons() {
            autoImportedCount = lessonsData.filter(l => 
                l.notes && (l.notes.includes('Validador Score') || l.notes.includes('v13.1'))
            ).length;
            document.getElementById('autoImportedLessons').textContent = autoImportedCount;
        }

        // Update overview statistics with PROMPT UNIVERSAL considerations ENHANCED
        function updateOverviewStats() {
            const completed = lessonsData.length;
            if (completed === 0) {
                document.getElementById('totalCompleted').textContent = '0/251';
                document.getElementById('avgScore').textContent = '0%';
                document.getElementById('avgTime').textContent = '0';
                document.getElementById('efficiency').textContent = '0%';
                document.getElementById('totalTime').textContent = '0';
                document.getElementById('estimatedCompletion').textContent = '-';
                document.getElementById('progressFill').style.width = '0%';
                return;
            }

            const avgScore = lessonsData.reduce((sum, l) => sum + l.score, 0) / completed || 0;
            const avgTime = lessonsData.reduce((sum, l) => sum + l.time, 0) / completed || 0;
            const totalTime = lessonsData.reduce((sum, l) => sum + l.time, 0) / 60; // hours
            const progressPercent = (completed / 251) * 100;

            // PROMPT UNIVERSAL Efficiency calculation (unified 85%+ threshold)
            const universalCompliantLessons = lessonsData.filter(l => {
                const expectedScore = getPromptUniversalExpectedScore(l.id);
                return l.score >= expectedScore && l.iterations === 1;
            }).length;
            const universalEfficiency = completed > 0 ? (universalCompliantLessons / completed * 100) : 100;

            // Estimate completion date based on PROMPT UNIVERSAL workflow
            const avgLessonsPerDay = 5; // More efficient with PROMPT UNIVERSAL
            const remainingLessons = 251 - completed;
            const daysRemaining = Math.ceil(remainingLessons / avgLessonsPerDay);
            const completionDate = new Date();
            completionDate.setDate(completionDate.getDate() + daysRemaining);

            document.getElementById('totalCompleted').textContent = `${completed}/251`;
            document.getElementById('avgScore').textContent = `${avgScore.toFixed(1)}%`;
            document.getElementById('avgTime').textContent = avgTime.toFixed(1);
            document.getElementById('efficiency').textContent = `${universalEfficiency.toFixed(0)}%`;
            document.getElementById('totalTime').textContent = totalTime.toFixed(1);
            document.getElementById('estimatedCompletion').textContent = completed > 0 ? 
                completionDate.toLocaleDateString('es-ES', {month: 'short', year: 'numeric'}) : '-';
            document.getElementById('progressFill').style.width = `${Math.max(progressPercent, 1)}%`;
        }

        // Update PROMPT UNIVERSAL specific statistics ENHANCED
        function updateV131Stats() {
            const completed = lessonsData.length;
            if (completed === 0) {
                document.getElementById('v131Compliance').textContent = '0%';
                document.getElementById('avgV131Score').textContent = '0%';
                document.getElementById('batchesCompleted').textContent = '0';
                return;
            }

            const universalCompliantLessons = lessonsData.filter(l => {
                const expectedScore = getPromptUniversalExpectedScore(l.id);
                return l.score >= expectedScore;
            }).length;

            const universalCompliance = (universalCompliantLessons / completed * 100);
            const avgUniversalScore = lessonsData.reduce((sum, l) => sum + l.score, 0) / completed;
            
            // Calculate completed batches
            const batchesCompleted = Math.floor(completed / 3);

            document.getElementById('v131Compliance').textContent = `${universalCompliance.toFixed(0)}%`;
            document.getElementById('avgV131Score').textContent = `${avgUniversalScore.toFixed(1)}%`;
            document.getElementById('batchesCompleted').textContent = batchesCompleted;
        }

        // Render lessons grid with PROMPT UNIVERSAL indicators ENHANCED
        function renderLessons() {
            const grid = document.getElementById('lessonsGrid');
            if (lessonsData.length === 0) {
                grid.innerHTML = '<div style="text-align: center; padding: 40px; color: var(--text-muted);">No hay lecciones registradas aún<br><small>Las lecciones del Validador se auto-importan aquí</small></div>';
                return;
            }

            const sortedLessons = [...lessonsData].sort((a, b) => b.id - a.id);
            
            grid.innerHTML = sortedLessons.map(lesson => {
                const title = curriculumTitles[lesson.id] || `Lección ${String(lesson.id).padStart(3, '0')}`;
                const level = getLessonLevel(lesson.id);
                const expectedScore = getPromptUniversalExpectedScore(lesson.id); // Always 85%
                const meetsUniversal = lesson.score >= expectedScore;
                const isAutoImported = lesson.notes && (lesson.notes.includes('Validador Score') || lesson.notes.includes('v13.1'));
                
                let statusClass, statusText, statusIcon;
                if (lesson.score >= expectedScore && lesson.iterations === 1) {
                    statusClass = 'excellent';
                    statusText = '✅ Excelente Universal';
                    statusIcon = '🟢';
                } else if (lesson.score >= expectedScore) {
                    statusClass = 'good';
                    statusText = '⚠️ Bueno Universal';
                    statusIcon = '🟡';
                } else {
                    statusClass = 'needs-work';
                    statusText = '❌ Necesita mejora';
                    statusIcon = '🔴';
                }
                
                return `
                    <div class="lesson-card">
                        <div class="lesson-header">
                            <div class="lesson-id">${String(lesson.id).padStart(3, '0')}</div>
                            <div class="lesson-status status-${statusClass}">${statusText}</div>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <strong>${title}</strong><br>
                            <small style="color: var(--text-muted);">${lesson.date || new Date().toLocaleDateString()}</small>
                            ${isAutoImported ? '<br><small style="color: var(--success); font-weight: 600;">📡 Auto-importada del Validador</small>' : ''}
                        </div>
                        <div class="level-indicator level-${level}">
                            ${level.toUpperCase()} - PROMPT UNIVERSAL: ${expectedScore}%+
                        </div>
                        <div class="lesson-metrics">
                            <div class="metric">
                                <div class="metric-value ${lesson.score >= expectedScore ? 'excellent' : lesson.score >= (expectedScore - 10) ? 'good' : 'needs-work'}">${lesson.score}%</div>
                                <div class="metric-label">Score Universal</div>
                            </div>
                            <div class="metric">
                                <div class="metric-value ${lesson.time <= 30 ? 'excellent' : lesson.time <= 45 ? 'good' : 'needs-work'}">${lesson.time}min</div>
                                <div class="metric-label">Tiempo</div>
                            </div>
                            <div class="metric">
                                <div class="metric-value ${lesson.iterations === 1 ? 'excellent' : lesson.iterations === 2 ? 'good' : 'needs-work'}">${lesson.iterations}</div>
                                <div class="metric-label">Iteraciones</div>
                            </div>
                            <div class="metric">
                                <div class="metric-value ${lesson.issues === 0 ? 'excellent' : lesson.issues <= 2 ? 'good' : 'needs-work'}">${lesson.issues}</div>
                                <div class="metric-label">Issues</div>
                            </div>
                        </div>
                        <div class="v131-indicator">
                            ${statusIcon} PROMPT UNIVERSAL: ${meetsUniversal ? 'CUMPLE' : 'NO CUMPLE'} (${expectedScore}%+)
                        </div>
                        ${lesson.notes ? `<div style="margin-top: 10px; font-size: 0.9rem; color: var(--text-muted);"><em>${lesson.notes}</em></div>` : ''}
                        <div style="margin-top: 10px;">
                            <button onclick="editLesson(${lesson.id})" style="background: var(--primary); color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">✏️ Editar</button>
                            <button onclick="deleteLesson(${lesson.id})" style="background: var(--error); color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8rem; margin-left: 5px;">🗑️ Eliminar</button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Render batches ENHANCED
        function renderBatches() {
            const grid = document.getElementById('batchGrid');
            const batches = [];
            
            // Group lessons by batches of 3
            for (let i = 1; i <= 251; i += 3) {
                const batchLessons = lessonsData.filter(l => l.id >= i && l.id < i + 3);
                const batchNumber = Math.ceil(i / 3);
                
                if (batchLessons.length > 0) {
                    const avgScore = batchLessons.reduce((sum, l) => sum + l.score, 0) / batchLessons.length;
                    const totalTime = batchLessons.reduce((sum, l) => sum + l.time, 0);
                    const allFirstIteration = batchLessons.every(l => l.iterations === 1);
                    const universalCompliant = batchLessons.every(l => l.score >= 85);
                    
                    batches.push({
                        number: batchNumber,
                        range: `${String(i).padStart(3, '0')}-${String(Math.min(i + 2, 251)).padStart(3, '0')}`,
                        completed: batchLessons.length,
                        avgScore: avgScore.toFixed(1),
                        totalTime,
                        efficiency: allFirstIteration ? 100 : Math.round(batchLessons.filter(l => l.iterations === 1).length / batchLessons.length * 100),
                        universalCompliant
                    });
                }
            }
            
            grid.innerHTML = batches.map(batch => `
                <div class="batch-item" style="${batch.universalCompliant ? 'border-left-color: var(--success);' : ''}">
                    <h4>Lote ${batch.range} ${batch.universalCompliant ? '✅' : '⚠️'}</h4>
                    <div style="margin: 8px 0;">
                        <div><strong>Completadas:</strong> ${batch.completed}/3</div>
                        <div><strong>Score promedio:</strong> ${batch.avgScore}%</div>
                        <div><strong>Tiempo total:</strong> ${batch.totalTime}min</div>
                        <div><strong>Eficiencia:</strong> ${batch.efficiency}%</div>
                        <div style="color: ${batch.universalCompliant ? 'var(--success)' : 'var(--warning)'};">
                            <strong>PROMPT UNIVERSAL:</strong> ${batch.universalCompliant ? 'CUMPLE' : 'PARCIAL'}
                        </div>
                    </div>
                </div>
            `).join('') || '<div class="batch-item">No hay lotes completados aún</div>';
        }

        // Update milestones with PROMPT UNIVERSAL criteria ENHANCED
        function updateMilestones() {
            // Section 1 (1-15)
            const section1Completed = lessonsData.filter(l => l.id >= 1 && l.id <= 15).length;
            const section1Element = document.getElementById('section1Status');
            section1Element.textContent = `${section1Completed}/15`;
            section1Element.className = `milestone-status ${section1Completed === 15 ? 'milestone-completed' : section1Completed > 0 ? 'milestone-current' : 'milestone-pending'}`;
            
            // Beginner level (1-66)
            const beginnerCompleted = lessonsData.filter(l => l.id >= 1 && l.id <= 66).length;
            const beginnerElement = document.getElementById('beginnerStatus');
            beginnerElement.textContent = `${beginnerCompleted}/66`;
            beginnerElement.className = `milestone-status ${beginnerCompleted === 66 ? 'milestone-completed' : beginnerCompleted > 0 ? 'milestone-current' : 'milestone-pending'}`;
            
            // Intermediate level (67-189)
            const intermediateCompleted = lessonsData.filter(l => l.id >= 67 && l.id <= 189).length;
            const intermediateElement = document.getElementById('intermediateStatus');
            intermediateElement.textContent = `${intermediateCompleted}/123`;
            intermediateElement.className = `milestone-status ${intermediateCompleted === 123 ? 'milestone-completed' : intermediateCompleted > 0 ? 'milestone-current' : 'milestone-pending'}`;
            
            // Advanced level (190-251)
            const advancedCompleted = lessonsData.filter(l => l.id >= 190 && l.id <= 251).length;
            const advancedElement = document.getElementById('advancedStatus');
            advancedElement.textContent = `${advancedCompleted}/62`;
            advancedElement.className = `milestone-status ${advancedCompleted === 62 ? 'milestone-completed' : advancedCompleted > 0 ? 'milestone-current' : 'milestone-pending'}`;
        }

        // Form submission with PROMPT UNIVERSAL validation ENHANCED
        document.getElementById('lessonForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const id = parseInt(document.getElementById('lessonId').value);
            const score = parseInt(document.getElementById('lessonScore').value);
            const time = parseInt(document.getElementById('lessonTime').value);
            const iterations = parseInt(document.getElementById('lessonIterations').value);
            const issues = parseInt(document.getElementById('lessonIssues').value);
            const notes = document.getElementById('lessonNotes').value;
            
            // PROMPT UNIVERSAL validation (unified 85%+ threshold)
            const expectedScore = getPromptUniversalExpectedScore(id);
            
            // Check if lesson already exists
            const existingIndex = lessonsData.findIndex(l => l.id === id);
            const lessonData = {
                id, score, time, iterations, issues, notes,
                date: new Date().toISOString().split('T')[0],
                v131Compliant: score >= expectedScore && iterations === 1,
                promptUniversalCompliant: score >= expectedScore // Always 85%+
            };
            
            if (existingIndex >= 0) {
                lessonsData[existingIndex] = lessonData;
                showNotification(`✅ Lección ${String(id).padStart(3, '0')} actualizada (PROMPT UNIVERSAL ENHANCED)`);
            } else {
                lessonsData.push(lessonData);
                const complianceMsg = score >= expectedScore ? '✅ CUMPLE UNIVERSAL' : '⚠️ No cumple 85%+';
                showNotification(`🎉 L${String(id).padStart(3, '0')} agregada - ${complianceMsg}`);
            }
            
            saveData();
            initDashboard();
            this.reset();
        });

        // Quick Import Functions ENHANCED
        function processQuickImport() {
            const text = document.getElementById('quickImportText').value.trim();
            if (!text) {
                showNotification('⚠️ Por favor pega los datos de las lecciones');
                return;
            }

            const lines = text.split('\n').filter(line => line.trim());
            const parsedLessons = [];
            const errors = [];

            lines.forEach((line, index) => {
                try {
                    const parsed = parseQuickImportLine(line.trim());
                    if (parsed) {
                        parsedLessons.push(parsed);
                    }
                } catch (error) {
                    errors.push(`Línea ${index + 1}: ${error.message}`);
                }
            });

            if (errors.length > 0) {
                showImportPreview(parsedLessons, errors);
                return;
            }

            if (parsedLessons.length === 0) {
                showNotification('❌ No se encontraron lecciones válidas');
                return;
            }

            // Process valid lessons
            let added = 0;
            let updated = 0;

            parsedLessons.forEach(lesson => {
                const existingIndex = lessonsData.findIndex(l => l.id === lesson.id);
                
                if (existingIndex >= 0) {
                    lessonsData[existingIndex] = lesson;
                    updated++;
                } else {
                    lessonsData.push(lesson);
                    added++;
                }
            });

            saveData();
            initDashboard();
            document.getElementById('quickImportText').value = '';
            
            showNotification(`🎉 Importación ENHANCED exitosa: ${added} agregadas, ${updated} actualizadas`);
        }

        function parseQuickImportLine(line) {
            // Support multiple formats:
            // Format 1: Lección: 004 | Score: 96 | Tiempo: 28 | Iteraciones: 1 | Issues: 0 | Notas: Optional
            // Format 2: L001: 72% | 8min | 2iter | 2issues | v13.1 FOUNDATION-SIMPLE | Prompt Universal: ON
            
            const lesson = {
                date: new Date().toISOString().split('T')[0]
            };

            // Check if it's the compact format (L001: 72% | 8min | 2iter | 2issues)
            if (line.match(/^L\d+:/)) {
                const parts = line.split('|').map(p => p.trim());
                
                if (parts.length < 4) {
                    throw new Error('Formato compacto incorrecto. Mínimo: L001: 72% | 8min | 2iter | 2issues');
                }

                // Parse L001: 72%
                const firstPart = parts[0];
                const lessonIdMatch = firstPart.match(/^L(\d+):\s*(\d+)%?/);
                if (lessonIdMatch) {
                    lesson.id = parseInt(lessonIdMatch[1]);
                    lesson.score = parseInt(lessonIdMatch[2]);
                } else {
                    throw new Error('Formato de lección inválido. Usar: L001: 72%');
                }

                // Parse remaining parts
                parts.slice(1).forEach(part => {
                    // Parse time: 8min
                    if (part.match(/^\d+min/)) {
                        lesson.time = parseInt(part.replace('min', ''));
                    }
                    // Parse iterations: 2iter
                    else if (part.match(/^\d+iter/)) {
                        lesson.iterations = parseInt(part.replace('iter', ''));
                    }
                    // Parse issues: 2issues
                    else if (part.match(/^\d+issues?/)) {
                        lesson.issues = parseInt(part.replace(/issues?/, ''));
                    }
                    // Everything else goes to notes
                    else {
                        if (!lesson.notes) lesson.notes = '';
                        lesson.notes += (lesson.notes ? ' | ' : '') + part;
                    }
                });

            } else {
                // Original format: Lección: 004 | Score: 96 | ...
                const parts = line.split('|').map(p => p.trim());
                
                if (parts.length < 5) {
                    throw new Error('Formato incorrecto. Mínimo: Lección | Score | Tiempo | Iteraciones | Issues');
                }

                parts.forEach(part => {
                    const [key, value] = part.split(':').map(p => p.trim());
                    
                    switch (key.toLowerCase()) {
                        case 'lección':
                        case 'leccion':
                            lesson.id = parseInt(value);
                            break;
                        case 'score':
                            lesson.score = parseInt(value.replace('%', ''));
                            break;
                        case 'tiempo':
                            lesson.time = parseInt(value.replace('min', '').replace('m', ''));
                            break;
                        case 'iteraciones':
                            lesson.iterations = parseInt(value);
                            break;
                        case 'issues':
                            lesson.issues = parseInt(value);
                            break;
                        case 'notas':
                            lesson.notes = value;
                            break;
                    }
                });
            }

            // Validate required fields
            if (!lesson.id || lesson.score === undefined || !lesson.time || !lesson.iterations || lesson.issues === undefined) {
                throw new Error('Faltan campos requeridos: ID, Score, Tiempo, Iteraciones, Issues');
            }

            // Validate ranges
            if (lesson.id < 1 || lesson.id > 251) {
                throw new Error(`ID de lección inválido: ${lesson.id}`);
            }
            if (lesson.score < 0 || lesson.score > 100) {
                throw new Error(`Score inválido: ${lesson.score}`);
            }
            if (lesson.time < 1) {
                throw new Error(`Tiempo inválido: ${lesson.time}`);
            }
            if (lesson.iterations < 1) {
                throw new Error(`Iteraciones inválidas: ${lesson.iterations}`);
            }
            if (lesson.issues < 0) {
                throw new Error(`Issues inválidos: ${lesson.issues}`);
            }

            // Add PROMPT UNIVERSAL compliance
            lesson.v131Compliant = lesson.score >= 85 && lesson.iterations === 1;
            lesson.promptUniversalCompliant = lesson.score >= 85;

            return lesson;
        }

        function showImportPreview(parsedLessons, errors) {
            const preview = document.getElementById('importPreview');
            preview.style.display = 'block';
            
            let html = '<h4 style="margin-bottom: 10px;">📋 Vista Previa ENHANCED:</h4>';
            
            if (parsedLessons.length > 0) {
                html += '<div style="background: rgba(22, 163, 74, 0.1); padding: 10px; border-radius: 6px; margin-bottom: 10px;">';
                html += '<strong>✅ Lecciones válidas PROMPT UNIVERSAL:</strong><br>';
                parsedLessons.forEach(lesson => {
                    const universal = lesson.score >= 85 ? '✅' : '⚠️';
                    html += `• ${universal} Lección ${String(lesson.id).padStart(3, '0')}: ${lesson.score}% (${lesson.time}min, ${lesson.iterations} iter, ${lesson.issues} issues)<br>`;
                });
                html += '</div>';
            }
            
            if (errors.length > 0) {
                html += '<div style="background: rgba(220, 38, 38, 0.1); padding: 10px; border-radius: 6px; margin-bottom: 10px;">';
                html += '<strong>❌ Errores encontrados:</strong><br>';
                errors.forEach(error => {
                    html += `• ${error}<br>`;
                });
                html += '</div>';
            }
            
            if (parsedLessons.length > 0) {
                html += '<button onclick="confirmImport()" class="btn btn-primary" style="margin-right: 10px;">✅ Confirmar Importación ENHANCED</button>';
            }
            html += '<button onclick="hideImportPreview()" class="btn btn-primary">❌ Cancelar</button>';
            
            preview.innerHTML = html;
        }

        function confirmImport() {
            const text = document.getElementById('quickImportText').value.trim();
            const lines = text.split('\n').filter(line => line.trim());
            const parsedLessons = [];

            lines.forEach(line => {
                try {
                    const parsed = parseQuickImportLine(line.trim());
                    if (parsed) {
                        parsedLessons.push(parsed);
                    }
                } catch (error) {
                    // Skip invalid lines in confirmation
                }
            });

            let added = 0;
            let updated = 0;

            parsedLessons.forEach(lesson => {
                const existingIndex = lessonsData.findIndex(l => l.id === lesson.id);
                
                if (existingIndex >= 0) {
                    lessonsData[existingIndex] = lesson;
                    updated++;
                } else {
                    lessonsData.push(lesson);
                    added++;
                }
            });

            saveData();
            initDashboard();
            document.getElementById('quickImportText').value = '';
            hideImportPreview();
            
            showNotification(`🎉 Importación ENHANCED confirmada: ${added} agregadas, ${updated} actualizadas`);
        }

        function hideImportPreview() {
            document.getElementById('importPreview').style.display = 'none';
        }

        function clearQuickImport() {
            document.getElementById('quickImportText').value = '';
            hideImportPreview();
            showNotification('🗑️ Datos de importación limpiados');
        }

        function showImportExample() {
            const examples = [
                '// Formato compacto (NUEVO):',
                'L004: 96% | 28min | 1iter | 0issues | PROMPT UNIVERSAL v13.1 ENHANCED',
                'L005: 94% | 42min | 1iter | 0issues | Template simple perfecto',
                '',
                '// Formato original:',
                'Lección: 006 | Score: 98 | Tiempo: 25 | Iteraciones: 1 | Issues: 0 | Notas: AUTOEXTRAER funcionando 100%'
            ];
            
            document.getElementById('quickImportText').value = examples.join('\n');
            showNotification('💡 Ejemplo ENHANCED cargado - Ambos formatos soportados');
        }

        // Check for auto-imported data from Validador ENHANCED
        function checkAutoImport() {
            const beforeCount = lessonsData.length;
            // Re-read from localStorage in case Validador added new data
            const latestData = JSON.parse(localStorage.getItem('rfAcademyLessonsV131')) || [];
            
            if (latestData.length > beforeCount) {
                lessonsData = latestData;
                const newCount = latestData.length - beforeCount;
                showNotification(`📡 ${newCount} lecciones auto-importadas del Validador ENHANCED`);
                initDashboard();
            } else {
                showNotification('🔍 No hay nuevas lecciones para importar');
            }
        }

        // Edit lesson ENHANCED
        function editLesson(id) {
            const lesson = lessonsData.find(l => l.id === id);
            if (lesson) {
                document.getElementById('lessonId').value = lesson.id;
                document.getElementById('lessonScore').value = lesson.score;
                document.getElementById('lessonTime').value = lesson.time;
                document.getElementById('lessonIterations').value = lesson.iterations;
                document.getElementById('lessonIssues').value = lesson.issues;
                document.getElementById('lessonNotes').value = lesson.notes || '';
                
                showNotification(`📝 Editando lección ${String(id).padStart(3, '0')} ENHANCED`);
            }
        }

        // Delete lesson ENHANCED
        function deleteLesson(id) {
            if (confirm(`¿Eliminar lección ${String(id).padStart(3, '0')}?`)) {
                lessonsData = lessonsData.filter(l => l.id !== id);
                saveData();
                initDashboard();
                showNotification(`🗑️ Lección ${String(id).padStart(3, '0')} eliminada`);
            }
        }

        // Import sample data with PROMPT UNIVERSAL scores ENHANCED
        function importSampleData() {
            const sampleLessons = [
                {id: 1, score: 95, time: 25, iterations: 1, issues: 0, notes: 'PROMPT UNIVERSAL v13.1 ENHANCED: Template simple perfecto | 95%', date: '2025-07-29', v131Compliant: true, promptUniversalCompliant: true},
                {id: 2, score: 87, time: 22, iterations: 1, issues: 0, notes: 'ENHANCED: AUTOEXTRAER funcionando | 87%', date: '2025-07-29', v131Compliant: true, promptUniversalCompliant: true},
                {id: 3, score: 83, time: 28, iterations: 2, issues: 1, notes: 'ENHANCED: Necesita ajuste menor', date: '2025-07-29', v131Compliant: false, promptUniversalCompliant: false},
                {id: 4, score: 92, time: 24, iterations: 1, issues: 0, notes: 'ENHANCED Batch 1: Excelente resultado', date: '2025-07-29', v131Compliant: true, promptUniversalCompliant: true},
                {id: 5, score: 89, time: 26, iterations: 1, issues: 0, notes: 'ENHANCED Batch 2: Muy bueno', date: '2025-07-29', v131Compliant: true, promptUniversalCompliant: true}
            ];
            
            sampleLessons.forEach(lesson => {
                if (!lessonsData.find(l => l.id === lesson.id)) {
                    lessonsData.push(lesson);
                }
            });
            
            saveData();
            initDashboard();
            showNotification('📊 Datos ejemplo PROMPT UNIVERSAL ENHANCED importados');
        }

        // Enhanced Export Functions
        function exportData() {
            const menu = document.createElement('div');
            menu.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 30px;
                border-radius: 12px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                z-index: 1000;
                color: var(--text);
                min-width: 350px;
            `;
            
            menu.innerHTML = `
                <h3 style="margin-bottom: 20px; color: var(--primary);">📋 Exportar Datos ENHANCED</h3>
                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <button onclick="exportToCSV(); closeExportMenu()" class="btn" style="background: var(--success); color: white;">📊 Exportar CSV</button>
                    <button onclick="exportToJSON(); closeExportMenu()" class="btn" style="background: var(--primary); color: white;">💾 Exportar JSON</button>
                    <button onclick="generateReport(); closeExportMenu()" class="btn" style="background: var(--warning); color: white;">📄 Generar Reporte</button>
                    <button onclick="exportForValidador(); closeExportMenu()" class="btn" style="background: #8b5cf6; color: white;">🔍 Export Validador</button>
                    <button onclick="exportBatchSummary(); closeExportMenu()" class="btn" style="background: #06b6d4; color: white;">📦 Export Lotes</button>
                    <button onclick="closeExportMenu()" class="btn" style="background: var(--text-muted); color: white;">❌ Cancelar</button>
                </div>
            `;
            
            // Overlay
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.5);
                z-index: 999;
            `;
            overlay.onclick = closeExportMenu;
            
            document.body.appendChild(overlay);
            document.body.appendChild(menu);
            
            window.exportMenu = menu;
            window.exportOverlay = overlay;
        }

        function closeExportMenu() {
            if (window.exportMenu) {
                document.body.removeChild(window.exportMenu);
                document.body.removeChild(window.exportOverlay);
                window.exportMenu = null;
                window.exportOverlay = null;
            }
        }

        function exportToCSV() {
            const headers = ['Lección', 'Score', 'Tiempo', 'Iteraciones', 'Issues', 'Notas', 'Fecha', 'Universal_Compliant'];
            const csvContent = [headers.join(',')];
            
            lessonsData.forEach(lesson => {
                const row = [
                    String(lesson.id).padStart(3, '0'),
                    lesson.score,
                    lesson.time,
                    lesson.iterations,
                    lesson.issues,
                    `"${lesson.notes || ''}"`,
                    lesson.date,
                    lesson.promptUniversalCompliant ? 'SI' : 'NO'
                ];
                csvContent.push(row.join(','));
            });
            
            downloadFile('rf_academy_enhanced_v131.csv', csvContent.join('\n'));
        }

        function exportToJSON() {
            const exportData = {
                exportDate: new Date().toISOString(),
                version: 'v13.1-ENHANCED-PROMPT-UNIVERSAL',
                totalLessons: lessonsData.length,
                promptUniversalCompliance: lessonsData.filter(l => l.promptUniversalCompliant).length / lessonsData.length * 100,
                batchesCompleted: Math.floor(lessonsData.length / 3),
                universalThreshold: '85%+ unified',
                autoImportedCount: autoImportedCount,
                enhancedFeatures: ['quickImport', 'batchTracking', 'autoImport', 'advancedExport'],
                lessons: lessonsData
            };
            
            downloadFile('rf_academy_enhanced_v131.json', JSON.stringify(exportData, null, 2));
        }

        function generateReport() {
            const completed = lessonsData.length;
            const avgScore = lessonsData.reduce((sum, l) => sum + l.score, 0) / completed || 0;
            const avgTime = lessonsData.reduce((sum, l) => sum + l.time, 0) / completed || 0;
            const efficiency = lessonsData.filter(l => l.iterations === 1).length / completed * 100 || 100;
            const universalCompliant = lessonsData.filter(l => l.promptUniversalCompliant).length;
            const batchesCompleted = Math.floor(completed / 3);
            
            const report = `# Robot Framework Academy - Reporte ENHANCED v13.1

## 📊 Estadísticas Generales PROMPT UNIVERSAL
- **Lecciones completadas:** ${completed}/251 (${((completed/251)*100).toFixed(1)}%)
- **Score promedio:** ${avgScore.toFixed(1)}%
- **Tiempo promedio:** ${avgTime.toFixed(1)} min/lección
- **Eficiencia:** ${efficiency.toFixed(1)}% (primera iteración)
- **Compliance PROMPT UNIVERSAL:** ${universalCompliant}/${completed} lecciones (${((universalCompliant/completed)*100).toFixed(1)}%)
- **Lotes completados:** ${batchesCompleted} lotes de 3

## 🎯 PROMPT UNIVERSAL v13.1 ENHANCED
- **Umbral unificado:** 85%+ para todos los niveles
- **Template simple:** Compatible
- **AUTOEXTRAER:** Funcionando
- **Importación rápida:** Activa
- **Auto-importación Validador:** ${autoImportedCount} lecciones

## 📋 Lecciones Completadas
${lessonsData.map(l => `- **${String(l.id).padStart(3, '0')}:** ${l.score}% (${l.time}min, ${l.iterations} iter) ${l.promptUniversalCompliant ? '✅' : '⚠️'} - ${l.notes || 'Sin notas'}`).join('\n')}

---
*Reporte ENHANCED generado el ${new Date().toLocaleDateString('es-ES')} con v13.1 PROMPT UNIVERSAL SYNC*
`;
            
            downloadFile('rf_academy_enhanced_report_v131.md', report);
        }

        function exportForValidador() {
            const validatorData = {
                exportType: 'validador-compatible',
                version: 'v13.1-ENHANCED',
                timestamp: new Date().toISOString(),
                lessons: lessonsData.map(l => ({
                    id: l.id,
                    score: l.score,
                    validatorReady: l.score >= 85,
                    notes: l.notes,
                    promptUniversalCompliant: l.promptUniversalCompliant
                }))
            };
            
            downloadFile('rf_academy_for_validador_v131.json', JSON.stringify(validatorData, null, 2));
        }

        function exportBatchSummary() {
            const batches = [];
            
            for (let i = 1; i <= 251; i += 3) {
                const batchLessons = lessonsData.filter(l => l.id >= i && l.id < i + 3);
                if (batchLessons.length > 0) {
                    const avgScore = batchLessons.reduce((sum, l) => sum + l.score, 0) / batchLessons.length;
                    const universalCompliant = batchLessons.every(l => l.score >= 85);
                    
                    batches.push({
                        range: `${String(i).padStart(3, '0')}-${String(Math.min(i + 2, 251)).padStart(3, '0')}`,
                        completed: batchLessons.length,
                        avgScore: avgScore.toFixed(1),
                        universalCompliant,
                        lessons: batchLessons.map(l => l.id)
                    });
                }
            }
            
            const batchReport = `# RF Academy - Resumen por Lotes ENHANCED

## 📦 Análisis de Lotes (grupos de 3 lecciones)

${batches.map(b => `### Lote ${b.range} ${b.universalCompliant ? '✅' : '⚠️'}
- **Completadas:** ${b.completed}/3
- **Score promedio:** ${b.avgScore}%
- **PROMPT UNIVERSAL:** ${b.universalCompliant ? 'CUMPLE' : 'PARCIAL'}
- **Lecciones:** ${b.lessons.join(', ')}
`).join('\n')}

---
*Generado el ${new Date().toLocaleDateString('es-ES')} con Dashboard ENHANCED v13.1*
`;
            
            downloadFile('rf_academy_batches_v131.md', batchReport);
        }

        function downloadFile(filename, content) {
            const element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
            
            showNotification(`💾 ${filename} descargado (ENHANCED)`);
        }

        function clearAllData() {
            if (confirm('¿Eliminar TODOS los datos ENHANCED? Esta acción no se puede deshacer.')) {
                lessonsData = [];
                saveData();
                initDashboard();
                showNotification('🗑️ Todos los datos ENHANCED eliminados');
            }
        }

        // Show notification ENHANCED
        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.textContent = message;
            
            document.getElementById('notifications').appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3500);
        }

        // Save data to localStorage with v13.1 key ENHANCED
        function saveData() {
            localStorage.setItem('rfAcademyLessonsV131', JSON.stringify(lessonsData));
        }

        // Initialize dashboard on load ENHANCED
        document.addEventListener('DOMContentLoaded', () => {
            console.log('📊 RF Academy Dashboard v13.1 ENHANCED - PROMPT UNIVERSAL SYNC iniciado');
            console.log('⚡ Umbrales unificados 85%+ para todos los niveles + ENHANCED FEATURES');
            console.log('🎯 Compatible con: "Generar lección XXX usando curriculum-data.js y template simple"');
            console.log('📡 Auto-importación desde Validador v13.1 + Importación rápida por lotes');
            console.log('🚀 ENHANCED: Gestión completa, exportación avanzada, tracking por lotes');
            initDashboard();
            
            // Check for auto-imported lessons on startup
            setTimeout(checkAutoImportedLessons, 1000);
        });
    </script>
</body>
</html>