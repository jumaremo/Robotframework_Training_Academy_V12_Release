<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üîç RF Academy - Validador v13.1 ENHANCED - PROMPT UNIVERSAL + DASHBOARD v13.1</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #2563eb;
            --success: #16a34a;
            --warning: #d97706;
            --error: #dc2626;
            --background: #f8fafc;
            --surface: #ffffff;
            --text: #1e293b;
            --text-muted: #64748b;
            --border: #e2e8f0;
            --border-strong: #cbd5e1;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--background);
            color: var(--text);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px;
            background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
            color: white;
            border-radius: 16px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .card {
            background: var(--surface);
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            border: 1px solid var(--border);
        }

        .card h2 {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .upload-area {
            border: 2px dashed var(--border-strong);
            border-radius: 12px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
            user-select: none;
        }

        .upload-area:hover {
            border-color: var(--primary);
            background: rgba(37, 99, 235, 0.05);
        }

        .upload-area.dragover {
            border-color: var(--primary);
            background: rgba(37, 99, 235, 0.1);
        }

        .upload-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            color: var(--text-muted);
        }

        #fileInput {
            display: none;
        }

        .textarea-container {
            margin-bottom: 20px;
        }

        #codeInput {
            width: 100%;
            height: 200px;
            padding: 15px;
            border: 1px solid var(--border);
            border-radius: 8px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 14px;
            resize: vertical;
            background: #f8f9fa;
        }

        .button-group {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: #1d4ed8;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: var(--text-muted);
            color: white;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .validation-settings {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            padding: 15px;
            background: #f1f5f9;
            border-radius: 8px;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .results-section {
            grid-column: 1 / -1;
        }

        .results-container {
            display: none;
            margin-top: 20px;
        }

        .results-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 8px;
        }

        .results-header.success {
            background: rgba(22, 163, 74, 0.1);
            color: var(--success);
            border: 1px solid rgba(22, 163, 74, 0.2);
        }

        .results-header.error {
            background: rgba(220, 38, 38, 0.1);
            color: var(--error);
            border: 1px solid rgba(220, 38, 38, 0.2);
        }

        .results-header.warning {
            background: rgba(217, 119, 6, 0.1);
            color: var(--warning);
            border: 1px solid rgba(217, 119, 6, 0.2);
        }

        .results-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .validation-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 8px;
        }

        .validation-item.success {
            background: rgba(22, 163, 74, 0.05);
        }

        .validation-item.error {
            background: rgba(220, 38, 38, 0.05);
        }

        .validation-item.warning {
            background: rgba(217, 119, 6, 0.05);
        }

        .icon {
            font-size: 1.2rem;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .metric-card {
            background: var(--surface);
            padding: 20px;
            border-radius: 8px;
            border: 1px solid var(--border);
            text-align: center;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .metric-value.success { color: var(--success); }
        .metric-value.warning { color: var(--warning); }
        .metric-value.error { color: var(--error); }

        .metric-label {
            color: var(--text-muted);
            font-size: 0.9rem;
        }

        .detailed-results {
            margin-top: 20px;
        }

        .collapsible {
            background: var(--surface);
            border: 1px solid var(--border);
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .collapsible-header {
            padding: 15px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
        }

        .collapsible-content {
            padding: 0 15px 15px;
            display: none;
            border-top: 1px solid var(--border);
        }

        .collapsible-content.active {
            display: block;
        }

        .prompt-aligned {
            background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading.active {
            display: block;
        }

        .spinner {
            border: 3px solid var(--border);
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .stats-summary {
            background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stat-label {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .prompt-sync-alert {
            background: linear-gradient(135deg, #8b5cf6 0%, #a855f7 100%);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
        }

        /* Export Modal Styles - ENHANCED from v11 */
        .export-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .export-modal-content {
            background: white;
            padding: 30px;
            border-radius: 12px;
            max-width: 700px;
            width: 90%;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            color: #1e293b;
            max-height: 90vh;
            overflow-y: auto;
        }

        .export-textarea {
            width: 100%;
            height: 80px;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 6px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 14px;
            resize: vertical;
            background: #f8f9fa;
        }

        .export-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 6px;
            font-size: 14px;
        }

        .export-btn {
            padding: 12px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .export-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .export-btn-success {
            background: var(--success);
            color: white;
        }

        .export-btn-primary {
            background: var(--primary);
            color: white;
        }

        .export-btn-secondary {
            background: var(--text-muted);
            color: white;
        }

        .error-list {
            list-style: none;
            padding: 0;
        }

        .error-item {
            background: rgba(220, 38, 38, 0.05);
            border: 1px solid rgba(220, 38, 38, 0.2);
            border-radius: 6px;
            padding: 12px;
            margin-bottom: 8px;
        }

        @media (max-width: 768px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .results-content {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç Robot Framework Academy</h1>
            <p>Validador v13.1 ENHANCED - PROMPT UNIVERSAL + DASHBOARD v13.1 EXPORT</p>
        </div>

        <!-- Prompt Sync Alert -->
        <div class="prompt-sync-alert">
            <h3>üéØ NUEVO: Validador ENHANCED v13.1 con Dashboard v13.1 Export</h3>
            <p><strong>Optimizado para:</strong> "Generar lecci√≥n XXX usando curriculum-data.js y template simple"</p>
            <p>‚úÖ Content blocks flexibles | ‚úÖ Variables RF autom√°ticas | ‚úÖ Export Dashboard v13.1 | ‚úÖ Template simple compatible</p>
        </div>

        <div class="main-grid">
            <!-- Input Section -->
            <div class="card">
                <h2>üìÅ Cargar Lecci√≥n</h2>
                
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">üìé</div>
                    <p><strong>Arrastra tu archivo .js aqu√≠</strong></p>
                    <p>o haz CLIC para seleccionar</p>
                </div>
                
                <input type="file" id="fileInput" accept=".js" />
                
                <div class="textarea-container">
                    <label for="codeInput">O pega el c√≥digo directamente:</label>
                    <textarea id="codeInput" placeholder="const LESSON_XXX = { ... }"></textarea>
                </div>

                <div class="validation-settings">
                    <div class="checkbox-group">
                        <input type="checkbox" id="strictMode">
                        <label for="strictMode">Modo estricto</label>
                    </div>
                    <div class="checkbox-group">
                        <input type="checkbox" id="promptUniversalMode" checked>
                        <label for="promptUniversalMode">Modo Prompt Universal</label>
                    </div>
                    <div class="checkbox-group">
                        <input type="checkbox" id="checkMetrics" checked>
                        <label for="checkMetrics">M√©tricas v13.1</label>
                    </div>
                    <div class="checkbox-group">
                        <input type="checkbox" id="checkContinuity" checked>
                        <label for="checkContinuity">Validar continuidad</label>
                    </div>
                </div>

                <div class="button-group">
                    <button class="btn btn-primary" onclick="validateLesson()">
                        üîç Validar con Prompt Universal
                    </button>
                    <button class="btn btn-secondary" onclick="clearResults()">
                        üóëÔ∏è Limpiar
                    </button>
                </div>
            </div>

            <!-- Quick Info Section -->
            <div class="card">
                <h2>üéØ Umbrales PROMPT UNIVERSAL v13.1 ENHANCED</h2>
                
                <div class="prompt-aligned">
                    <h3>‚ö° AJUSTES PARA PROMPT SIMPLE v13.1:</h3>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li><strong>Content blocks:</strong> Flexibles (4-6 m√≠nimo)</li>
                        <li><strong>Template simple:</strong> Compatible</li>
                        <li><strong>Variables RF:</strong> Auto-detectadas</li>
                        <li><strong>Headers:</strong> ‚â§5 palabras (directo al grano)</li>
                        <li><strong>Ratio pr√°ctica:</strong> 80%+ (m√°s permisivo)</li>
                        <li><strong>Export Dashboard:</strong> Autom√°tico v13.1 enhanced</li>
                    </ul>
                </div>

                <h3>üö® VALIDACIONES OPTIMIZADAS v13.1:</h3>
                <ul style="margin: 15px 0; padding-left: 20px;">
                    <li><strong>AUTOEXTRAER:</strong> Validaci√≥n curriculum-data</li>
                    <li><strong>Template simple:</strong> Estructura flexible</li>
                    <li><strong>Espa√±ol:</strong> Detecci√≥n autom√°tica</li>
                    <li><strong>Directo al grano:</strong> Headers cortos</li>
                    <li><strong>Export mejorado:</strong> Notas + tiempo + iteraciones + Dashboard v13.1</li>
                </ul>

                <h3>‚úÖ Niveles y umbrales optimizados:</h3>
                <ul style="margin: 15px 0; padding-left: 20px;">
                    <li><strong>5min:</strong> B√ÅSICO (80%+ pr√°ctica)</li>
                    <li><strong>8min:</strong> FOUNDATION (85%+ pr√°ctica)</li>
                    <li><strong>10min:</strong> INTEGRATION (85%+ pr√°ctica)</li>
                    <li><strong>15min:</strong> CAPSTONE (80%+ pr√°ctica)</li>
                </ul>
            </div>
        </div>

        <!-- Loading -->
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>Validando con PROMPT UNIVERSAL v13.1 ENHANCED...</p>
        </div>

        <!-- Results Section -->
        <div class="results-section">
            <div class="results-container" id="resultsContainer">
                <!-- Results will be inserted here -->
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentLesson = null;
        let validationResults = null;
        let validationStartTime = null;

        // ============================================================================
        // üéØ PROMPT UNIVERSAL v13.1 ENHANCED - UMBRALES OPTIMIZADOS PARA TEMPLATE SIMPLE
        // ============================================================================
        function getPromptUniversalThresholds(duration, title = '', level = 'beginner') {
            const minutes = parseInt(duration.match(/\d+/) || [10]);
            const tituloLower = title.toLowerCase();
            const isPromptUniversalMode = document.getElementById('promptUniversalMode').checked;
            
            // Keywords refinados para prompt universal
            const esFoundation = tituloLower.includes('introducci√≥n') ||
                                tituloLower.includes('fundamentos') ||
                                tituloLower.includes('instalaci√≥n') ||
                                tituloLower.includes('setup') ||
                                tituloLower.includes('configuraci√≥n');
            
            const esIntegration = tituloLower.includes('proyecto') ||
                                 tituloLower.includes('ejercicio') ||
                                 tituloLower.includes('completo') ||
                                 tituloLower.includes('capstone');
            
            // UMBRALES OPTIMIZADOS PARA PROMPT UNIVERSAL v13.1
            if (minutes <= 5) {
                return {
                    minContentBlocks: isPromptUniversalMode ? 4 : 6, // M√ÅS FLEXIBLE
                    requiredBlocks: ['intro', 'code-example', 'exercise', 'next-steps'], // SIMPLIFICADO
                    minRobotLines: isPromptUniversalMode ? 25 : 30, // M√ÅS PERMISIVO
                    minCommands: isPromptUniversalMode ? 15 : 20, // M√ÅS PERMISIVO
                    minVariables: isPromptUniversalMode ? 3 : 5, // M√ÅS FLEXIBLE
                    practiceRatio: isPromptUniversalMode ? 80 : 90, // M√ÅS PERMISIVO
                    maxHeaderWords: 5,
                    expectedScore: isPromptUniversalMode ? 85 : 95, // M√ÅS REALISTA
                    name: '5min B√ÅSICO-SIMPLE (85%+)',
                    level: 'B√ÅSICO-SIMPLE'
                };
            } else if (minutes === 8) {
                return {
                    minContentBlocks: isPromptUniversalMode ? 4 : 6,
                    requiredBlocks: ['intro', 'code-example', 'exercise', 'next-steps'],
                    minRobotLines: isPromptUniversalMode ? 30 : 35,
                    minCommands: isPromptUniversalMode ? 18 : 22,
                    minVariables: isPromptUniversalMode ? 4 : 6,
                    practiceRatio: isPromptUniversalMode ? 85 : 90,
                    maxHeaderWords: 5,
                    expectedScore: isPromptUniversalMode ? 85 : 95,
                    name: '8min FOUNDATION-SIMPLE (85%+)',
                    level: 'FOUNDATION-SIMPLE'
                };
            } else if (minutes <= 10) {
                return {
                    minContentBlocks: isPromptUniversalMode ? 5 : 6,
                    requiredBlocks: ['intro', 'code-example', 'exercise', 'troubleshooting', 'next-steps'],
                    minRobotLines: isPromptUniversalMode ? 35 : 40,
                    minCommands: isPromptUniversalMode ? 20 : 25,
                    minVariables: isPromptUniversalMode ? 5 : 8,
                    practiceRatio: isPromptUniversalMode ? 85 : 92,
                    maxHeaderWords: 5,
                    expectedScore: isPromptUniversalMode ? 85 : 95,
                    name: '10min INTEGRATION-SIMPLE (85%+)',
                    level: 'INTEGRATION-SIMPLE'
                };
            } else {
                // 15+ min CAPSTONE
                return {
                    minContentBlocks: isPromptUniversalMode ? 5 : 8,
                    requiredBlocks: ['intro', 'code-example', 'exercise', 'best-practices', 'next-steps'],
                    minRobotLines: isPromptUniversalMode ? 45 : 65,
                    minCommands: isPromptUniversalMode ? 25 : 35,
                    minVariables: isPromptUniversalMode ? 6 : 10,
                    practiceRatio: isPromptUniversalMode ? 80 : 90,
                    maxHeaderWords: 5,
                    expectedScore: isPromptUniversalMode ? 80 : 90,
                    name: `${minutes}min CAPSTONE-SIMPLE (80%+)`,
                    level: 'CAPSTONE-SIMPLE'
                };
            }
        }

        // ============================================================================
        // üìä FUNCI√ìN RATIO OPTIMIZADA PARA PROMPT UNIVERSAL
        // ============================================================================
        
        function calculatePracticeContentUniversal(content) {
            let practiceScore = 0;
            
            // ‚úÖ CONTENIDO PR√ÅCTICO optimizado para template simple:
            
            // C√≥digo Robot Framework ejecutable (peso alto)
            const robotCodeBlocks = (content.match(/<pre><code class="robot">/g) || []).length;
            practiceScore += robotCodeBlocks * 12; // INCREMENTADO para template simple
            
            // Comandos bash/shell verificables (peso alto)
            const bashCodeBlocks = (content.match(/<pre><code class="bash">/g) || []).length;
            practiceScore += bashCodeBlocks * 10; // INCREMENTADO
            
            // Exercise steps con comandos (peso alto)
            const exerciseSteps = (content.match(/class="exercise-step"|üéØ|<h3>.*[Pp]r√°ctica|<h3>.*[Ee]jercicio/g) || []).length;
            practiceScore += exerciseSteps * 8; // M√ÅS PERMISIVO
            
            // Quick examples y demos pr√°cticos
            const quickExamples = (content.match(/üíª|<h3>.*[Ee]jemplo|<pre><code/g) || []).length;
            practiceScore += quickExamples * 6; // NUEVO para template simple
            
            // Validation blocks con comandos
            const validationBlocks = (content.match(/‚úÖ|class="validation"|Al final sabr√°s/g) || []).length;
            practiceScore += validationBlocks * 5;
            
            // File creation commands (echo, cat, touch, mkdir)
            const fileCommands = (content.match(/echo\s+|cat\s+>|touch\s+|mkdir\s+|robot\s+|cd\s+/g) || []).length;
            practiceScore += fileCommands * 3;
            
            return practiceScore;
        }
        
        function calculateTheoryContentUniversal(content) {
            let theoryScore = 0;
            
            // ‚ùå CONTENIDO TE√ìRICO reducido para template simple:
            
            // Headers y t√≠tulos (necesarios pero minimizados)
            const headers = (content.match(/<h[1-6]>/g) || []).length;
            theoryScore += headers * 0.5; // REDUCIDO para template simple
            
            // P√°rrafos explicativos (peso reducido)
            const paragraphs = content.match(/<p>(.*?)<\/p>/g) || [];
            paragraphs.forEach(p => {
                const text = p.replace(/<[^>]*>/g, '');
                if (text.length > 100) { // Solo p√°rrafos muy largos penalizan
                    theoryScore += 2; // REDUCIDO
                } else {
                    theoryScore += 0.5; // MUY REDUCIDO
                }
            });
            
            // Lists items explicativos (m√°s permisivo)
            const listItems = (content.match(/<li>/g) || []).length;
            theoryScore += listItems * 0.3; // MUY REDUCIDO
            
            return theoryScore;
        }

        // File upload handlers
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const codeInput = document.getElementById('codeInput');

        // Initialize event listeners
        function initializeEventListeners() {
            uploadArea.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                fileInput.click();
            });

            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.stopPropagation();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', (e) => {
                e.preventDefault();
                e.stopPropagation();
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                e.stopPropagation();
                uploadArea.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFile(files[0]);
                }
            });

            fileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleFile(e.target.files[0]);
                }
            });
        }

        function handleFile(file) {
            if (!file.name.endsWith('.js')) {
                alert('Por favor selecciona un archivo JavaScript (.js)');
                return;
            }

            uploadArea.innerHTML = `
                <div class="upload-icon">üìÑ</div>
                <p><strong>Archivo cargado: ${file.name}</strong></p>
                <p>Leyendo contenido...</p>
            `;

            const reader = new FileReader();
            reader.onload = (e) => {
                codeInput.value = e.target.result;
                uploadArea.innerHTML = `
                    <div class="upload-icon">‚úÖ</div>
                    <p><strong>Archivo cargado: ${file.name}</strong></p>
                    <p>Listo para validar con PROMPT UNIVERSAL v13.1 ENHANCED</p>
                `;
            };
            
            reader.onerror = (e) => {
                alert('Error al leer el archivo');
                resetUploadArea();
            };
            
            reader.readAsText(file);
        }

        function resetUploadArea() {
            uploadArea.innerHTML = `
                <div class="upload-icon">üìé</div>
                <p><strong>Arrastra tu archivo .js aqu√≠</strong></p>
                <p>o haz CLIC para seleccionar</p>
            `;
        }

        // Main validation function
        async function validateLesson() {
            const code = codeInput.value.trim();
            
            if (!code) {
                alert('Por favor proporciona el c√≥digo de la lecci√≥n');
                return;
            }

            validationStartTime = Date.now();
            showLoading(true);
            
            try {
                currentLesson = parseLesson(code);
                validationResults = await runValidations(currentLesson, code);
                displayResults(validationResults);
            } catch (error) {
                displayError('Error al validar la lecci√≥n: ' + error.message);
            }
            
            showLoading(false);
        }

        function parseLesson(code) {
            try {
                const cleanCode = code.replace(/\/\*[\s\S]*?\*\//g, '').replace(/\/\/.*$/gm, '');
                
                const lessonMatch = cleanCode.match(/const\s+(LESSON_\d+)\s*=\s*({[\s\S]*?});?\s*(?=if\s*\(|$)/);
                if (!lessonMatch) {
                    throw new Error('No se encontr√≥ definici√≥n de lecci√≥n v√°lida (const LESSON_XXX = {...};)');
                }

                const lessonName = lessonMatch[1];
                const lessonObjectStr = lessonMatch[2];

                const idMatch = lessonName.match(/LESSON_(\d+)/);
                const expectedId = idMatch ? parseInt(idMatch[1]) : null;

                let lessonObj;
                try {
                    const safeEval = new Function('return ' + lessonObjectStr);
                    lessonObj = safeEval();
                } catch (evalError) {
                    throw new Error('Error de sintaxis en el objeto de la lecci√≥n: ' + evalError.message);
                }

                return {
                    raw: code,
                    name: lessonName,
                    expectedId,
                    object: lessonObj,
                    cleanCode
                };

            } catch (error) {
                throw new Error('Error al parsear la lecci√≥n: ' + error.message);
            }
        }

        async function runValidations(lesson, rawCode) {
            const results = {
                overall: 'success',
                score: 0,
                maxScore: 0,
                sections: {},
                metrics: {},
                errors: [],
                warnings: []
            };

            // Get PROMPT UNIVERSAL thresholds
            const thresholds = getPromptUniversalThresholds(
                lesson.object.duration || '8 min',
                lesson.object.title || '',
                lesson.object.level || 'beginner'
            );
            results.thresholds = thresholds;

            // 1. Syntax Validation (simplificada)
            results.sections.syntax = validateSyntaxUniversal(lesson, rawCode);
            
            // 2. Structure Validation (optimizada)
            results.sections.structure = validateStructureUniversal(lesson, thresholds);
            
            // 3. Content Validation (ajustada)
            results.sections.content = validateContentUniversal(lesson, thresholds);
            
            // 4. Variables Validation (m√°s permisiva)
            results.sections.variables = validateVariablesUniversal(lesson, rawCode, thresholds);
            
            // 5. Curriculum Integration (NUEVO)
            results.sections.curriculum = validateCurriculumIntegration(lesson);

            // 6. Enhanced Metrics from v11
            if (document.getElementById('checkMetrics').checked) {
                results.sections.metrics = validateMetricsEnhanced(lesson);
            }

            // 7. Enhanced Continuity from v11
            if (document.getElementById('checkContinuity').checked) {
                results.sections.continuity = validateContinuityEnhanced(lesson);
            }

            calculateOverallScore(results);
            return results;
        }

        // ============================================================================
        // üîß VALIDACIONES OPTIMIZADAS PARA PROMPT UNIVERSAL
        // ============================================================================
        
        function validateSyntaxUniversal(lesson, rawCode) {
            const result = {
                name: 'Sintaxis JavaScript (PROMPT UNIVERSAL v13.1)',
                status: 'success',
                checks: [],
                score: 0,
                maxScore: 40
            };

            // Variables RF (m√°s permisivo)
            const correctlyEscapedVars = [...rawCode.matchAll(/\\\\\\\\\$\{[^}]+\}/g)];
            const simpleVars = [...rawCode.matchAll(/\$\{[^}]+\}/g)].filter(v => !rawCode.substring(Math.max(0, v.index - 4), v.index).includes('\\\\\\\\'));

            if (correctlyEscapedVars.length > 0) {
                result.checks.push({
                    name: 'Variables Robot Framework',
                    status: 'success',
                    message: `${correctlyEscapedVars.length} variables RF correctas`
                });
                result.score += 15;
            } else if (simpleVars.length > 0) {
                result.checks.push({
                    name: 'Variables Robot Framework',
                    status: 'warning',
                    message: `${simpleVars.length} variables detectadas (mejorar escape)`,
                    details: 'Usar \\\\\\\\${VAR} para mejor compatibilidad'
                });
                result.score += 10;
            } else {
                result.checks.push({
                    name: 'Variables Robot Framework',
                    status: 'warning',
                    message: 'No se encontraron variables RF',
                    details: 'Template simple puede no necesitarlas'
                });
                result.score += 8;
            }

            // Punto y coma (opcional)
            if (rawCode.match(/};\s*$/m)) {
                result.checks.push({
                    name: 'Sintaxis v√°lida',
                    status: 'success',
                    message: 'Sintaxis JavaScript correcta'
                });
                result.score += 15;
            } else {
                result.checks.push({
                    name: 'Sintaxis v√°lida',
                    status: 'warning',
                    message: 'Sintaxis v√°lida (mejorable)'
                });
                result.score += 12;
            }

            // Template string
            if (rawCode.match(/content:\s*`([\s\S]*?)`/)) {
                result.checks.push({
                    name: 'Content template',
                    status: 'success',
                    message: 'Template string v√°lido'
                });
                result.score += 10;
            } else {
                result.checks.push({
                    name: 'Content template',
                    status: 'warning',
                    message: 'Template detectado (verificar formato)'
                });
                result.score += 8;
            }

            return result;
        }

        function validateStructureUniversal(lesson, thresholds) {
            const result = {
                name: `Estructura ${thresholds.level}`,
                status: 'success',
                checks: [],
                score: 0,
                maxScore: 60
            };

            const obj = lesson.object;

            // Required properties (b√°sicas)
            const requiredProps = ['id', 'title', 'duration', 'content'];
            const missingProps = requiredProps.filter(prop => !(prop in obj));

            if (missingProps.length === 0) {
                result.checks.push({
                    name: 'Propiedades esenciales',
                    status: 'success',
                    message: 'Propiedades b√°sicas presentes'
                });
                result.score += 20;
            } else {
                result.checks.push({
                    name: 'Propiedades esenciales',
                    status: 'error',
                    message: `Faltan: ${missingProps.join(', ')}`
                });
                result.status = 'error';
            }

            // Content blocks (flexibles)
            const content = obj.content || '';
            const hasIntro = content.includes('Concepto') || content.includes('<h2>') || content.includes('üß†');
            const hasExample = content.includes('Ejemplo') || content.includes('<pre><code') || content.includes('üíª');
            const hasExercise = content.includes('Pr√°ctica') || content.includes('üéØ') || content.includes('ejercicio');
            const hasNext = content.includes('Siguiente') || content.includes('üöÄ') || content.includes('pr√≥xima');

            const foundBasicBlocks = [hasIntro, hasExample, hasExercise, hasNext].filter(Boolean).length;

            if (foundBasicBlocks >= 3) {
                result.checks.push({
                    name: 'Content blocks b√°sicos',
                    status: 'success',
                    message: `${foundBasicBlocks}/4 blocks esenciales encontrados`
                });
                result.score += 25;
            } else {
                result.checks.push({
                    name: 'Content blocks b√°sicos',
                    status: 'warning',
                    message: `${foundBasicBlocks}/4 blocks esenciales (m√≠nimo: 3)`,
                    details: 'Template simple necesita: Concepto, Ejemplo, Pr√°ctica, Siguiente'
                });
                result.score += Math.round((foundBasicBlocks / 4) * 25);
            }

            // Headers cortos (directo al grano)
            const headers = content.match(/<h[1-6]>(.*?)<\/h[1-6]>/g) || [];
            const shortHeaders = headers.filter(header => {
                const text = header.replace(/<[^>]*>/g, '').replace(/[^\w\s]/g, '');
                const words = text.split(/\s+/).filter(word => word.length > 0);
                return words.length <= thresholds.maxHeaderWords;
            });

            if (shortHeaders.length === headers.length && headers.length > 0) {
                result.checks.push({
                    name: 'Headers directos',
                    status: 'success',
                    message: `${headers.length} headers cumplen regla "directo al grano"`
                });
                result.score += 15;
            } else {
                result.checks.push({
                    name: 'Headers directos',
                    status: 'warning',
                    message: `${shortHeaders.length}/${headers.length} headers son directos`,
                    details: `PROMPT UNIVERSAL: Headers ‚â§${thresholds.maxHeaderWords} palabras`
                });
                result.score += Math.round((shortHeaders.length / Math.max(headers.length, 1)) * 15);
            }

            return result;
        }

        function validateContentUniversal(lesson, thresholds) {
            const result = {
                name: `Contenido ${thresholds.level}`,
                status: 'success',
                checks: [],
                score: 0,
                maxScore: 80
            };

            const content = lesson.object.content || '';

            // Robot Framework code (ajustado)
            const robotCodeMatches = content.match(/<pre><code class="robot">([\s\S]*?)<\/code><\/pre>/g);
            let totalRobotLines = 0;
            
            if (robotCodeMatches) {
                robotCodeMatches.forEach(match => {
                    const codeContent = match.replace(/<[^>]*>/g, '');
                    totalRobotLines += codeContent.split('\n').filter(line => line.trim().length > 0).length;
                });
            }

            if (totalRobotLines >= thresholds.minRobotLines) {
                result.checks.push({
                    name: 'C√≥digo Robot Framework',
                    status: 'success',
                    message: `${totalRobotLines} l√≠neas RF (${thresholds.name})`
                });
                result.score += 30;
            } else if (totalRobotLines >= (thresholds.minRobotLines * 0.7)) {
                result.checks.push({
                    name: 'C√≥digo Robot Framework',
                    status: 'warning',
                    message: `${totalRobotLines} l√≠neas (objetivo: ${thresholds.minRobotLines})`,
                    details: 'Template simple: agregar m√°s ejemplos pr√°cticos'
                });
                result.score += 20;
            } else {
                result.checks.push({
                    name: 'C√≥digo Robot Framework',
                    status: 'error',
                    message: `${totalRobotLines} l√≠neas (m√≠nimo: ${thresholds.minRobotLines})`,
                    details: 'PROMPT UNIVERSAL requiere ejemplos pr√°cticos'
                });
                result.status = 'error';
                result.score += 10;
            }

            // Comandos verificables (m√°s permisivo)
            const commandPatterns = [
                /robot\s+/g, /mkdir\s+/g, /ls\s+/g, /cd\s+/g, /echo\s+/g,
                /python\s+/g, /pip\s+/g, /code\s+/g, /which\s+/g
            ];

            let totalCommands = 0;
            commandPatterns.forEach(pattern => {
                const matches = content.match(pattern);
                if (matches) totalCommands += matches.length;
            });

            if (totalCommands >= thresholds.minCommands) {
                result.checks.push({
                    name: 'Comandos verificables',
                    status: 'success',
                    message: `${totalCommands} comandos (${thresholds.name})`
                });
                result.score += 25;
            } else if (totalCommands >= (thresholds.minCommands * 0.7)) {
                result.checks.push({
                    name: 'Comandos verificables',
                    status: 'warning',
                    message: `${totalCommands} comandos (objetivo: ${thresholds.minCommands})`
                });
                result.score += 18;
            } else {
                result.checks.push({
                    name: 'Comandos verificables',
                    status: 'warning',
                    message: `${totalCommands} comandos (m√≠nimo: ${thresholds.minCommands})`,
                    details: 'Template simple puede tener menos comandos'
                });
                result.score += 12;
            }

            // Ratio pr√°ctica/teor√≠a (optimizado)
            const practiceContent = calculatePracticeContentUniversal(content);
            const theoryContent = calculateTheoryContentUniversal(content);
            
            const totalContent = practiceContent + theoryContent;
            const practiceRatio = totalContent > 0 ? (practiceContent / totalContent) * 100 : 0;

            if (practiceRatio >= thresholds.practiceRatio) {
                result.checks.push({
                    name: 'Ratio pr√°ctica/teor√≠a',
                    status: 'success',
                    message: `${Math.round(practiceRatio)}% pr√°ctica (PROMPT UNIVERSAL: ${thresholds.practiceRatio}%+)`
                });
                result.score += 25;
            } else if (practiceRatio >= (thresholds.practiceRatio - 15)) {
                result.checks.push({
                    name: 'Ratio pr√°ctica/teor√≠a',
                    status: 'warning',
                    message: `${Math.round(practiceRatio)}% pr√°ctica (objetivo: ${thresholds.practiceRatio}%+)`,
                    details: 'Template simple optimizado para pr√°ctica'
                });
                result.score += 18;
            } else {
                result.checks.push({
                    name: 'Ratio pr√°ctica/teor√≠a',
                    status: 'error',
                    message: `${Math.round(practiceRatio)}% pr√°ctica (m√≠nimo: ${thresholds.practiceRatio}%+)`,
                    details: 'PROMPT UNIVERSAL enfocado en pr√°ctica directa'
                });
                result.status = 'error';
                result.score += 10;
            }

            return result;
        }

        function validateVariablesUniversal(lesson, rawCode, thresholds) {
            const result = {
                name: 'Variables RF (PROMPT UNIVERSAL)',
                status: 'success',
                checks: [],
                score: 0,
                maxScore: 30
            };

            // Variables RF (m√°s flexible)
            const correctVars = [...rawCode.matchAll(/\\\\\\\\\$\{[^}]+\}/g)];
            const simpleVars = [...rawCode.matchAll(/\$\{[^}]+\}/g)];
            const totalVars = correctVars.length + simpleVars.length;

            if (correctVars.length >= thresholds.minVariables) {
                result.checks.push({
                    name: 'Variables RF',
                    status: 'success',
                    message: `${correctVars.length} variables RF perfectas`
                });
                result.score += 20;
            } else if (totalVars >= thresholds.minVariables) {
                result.checks.push({
                    name: 'Variables RF',
                    status: 'warning',
                    message: `${totalVars} variables RF detectadas (mejorar escape)`,
                    details: 'PROMPT UNIVERSAL auto-detecta variables'
                });
                result.score += 15;
            } else if (totalVars > 0) {
                result.checks.push({
                    name: 'Variables RF',
                    status: 'warning',
                    message: `${totalVars} variables RF (objetivo: ${thresholds.minVariables})`,
                    details: 'Template simple puede tener menos variables'
                });
                result.score += 10;
            } else {
                result.checks.push({
                    name: 'Variables RF',
                    status: 'warning',
                    message: 'No se detectaron variables RF',
                    details: 'Template simple b√°sico no requiere variables'
                });
                result.score += 8;
            }

            // Auto-detection bonus
            const hasAutoExtract = lesson.object.title && lesson.object.duration && lesson.object.level;
            if (hasAutoExtract) {
                result.checks.push({
                    name: 'AUTOEXTRAER curriculum-data',
                    status: 'success',
                    message: 'Datos auto-extra√≠dos correctamente'
                });
                result.score += 10;
            } else {
                result.checks.push({
                    name: 'AUTOEXTRAER curriculum-data',
                    status: 'warning',
                    message: 'Verificar auto-extracci√≥n de datos'
                });
                result.score += 5;
            }

            return result;
        }

        function validateCurriculumIntegration(lesson) {
            const result = {
                name: 'Integraci√≥n Curriculum',
                status: 'success',
                checks: [],
                score: 0,
                maxScore: 20
            };

            const obj = lesson.object;

            // Verificar datos del curriculum
            const hasValidId = obj.id && obj.id >= 1 && obj.id <= 251;
            const hasValidTitle = obj.title && obj.title.length > 5;
            const hasValidDuration = obj.duration && obj.duration.includes('min');

            if (hasValidId && hasValidTitle && hasValidDuration) {
                result.checks.push({
                    name: 'Datos curriculum-data.js',
                    status: 'success',
                    message: 'Integraci√≥n perfecta con curriculum'
                });
                result.score += 15;
            } else {
                result.checks.push({
                    name: 'Datos curriculum-data.js',
                    status: 'warning',
                    message: 'Verificar integraci√≥n con curriculum-data.js'
                });
                result.score += 10;
            }

            // Verificar idioma espa√±ol
            const content = obj.content || '';
            const spanishWords = ['pr√°ctica', 'ejemplo', 'concepto', 'siguiente', 'robot', 'framework'];
            const spanishCount = spanishWords.filter(word => content.toLowerCase().includes(word)).length;

            if (spanishCount >= 3) {
                result.checks.push({
                    name: 'Idioma espa√±ol',
                    status: 'success',
                    message: 'Contenido en espa√±ol detectado'
                });
                result.score += 5;
            } else {
                result.checks.push({
                    name: 'Idioma espa√±ol',
                    status: 'warning',
                    message: 'Verificar contenido en espa√±ol'
                });
                result.score += 3;
            }

            return result;
        }

        // ============================================================================
        // üìä ENHANCED VALIDATIONS FROM v11
        // ============================================================================

        function validateMetricsEnhanced(lesson) {
            const result = {
                name: 'M√©tricas Enhanced v13.1',
                status: 'success',
                checks: [],
                score: 0,
                maxScore: 30
            };

            const obj = lesson.object;
            const content = obj.content || '';

            // Duration vs content analysis (enhanced)
            const duration = obj.duration || '';
            const estimatedMinutes = parseInt(duration.match(/\d+/) || [0]);
            
            const contentComplexity = 
                (content.match(/<pre><code/g) || []).length * 2 +
                (content.match(/class="exercise-step"|üéØ/g) || []).length * 3 +
                (content.match(/class="validation"|‚úÖ/g) || []).length * 1 +
                (content.match(/üíª|üß†|üöÄ/g) || []).length * 0.5; // NUEVO: emojis

            const estimatedContentTime = Math.round(contentComplexity * 1.2);

            const timeDiff = Math.abs(estimatedMinutes - estimatedContentTime);
            if (timeDiff <= 3 || estimatedMinutes <= 5) { // M√ÅS PERMISIVO
                result.checks.push({
                    name: 'Duraci√≥n vs contenido',
                    status: 'success',
                    message: `Duraci√≥n balanceada: ${estimatedMinutes}min`
                });
                result.score += 15;
            } else {
                result.checks.push({
                    name: 'Duraci√≥n vs contenido',
                    status: 'warning',
                    message: `Duraci√≥n: ${estimatedMinutes}min, contenido estimado: ${estimatedContentTime}min`
                });
                result.score += 8;
            }

            // Learning objectives quality (enhanced)
            const objectives = obj.learningObjectives || obj.topics || [];
            const qualityObjectives = objectives.filter(obj => 
                typeof obj === 'string' && obj.length > 10 && 
                (obj.toLowerCase().includes('implementar') || 
                 obj.toLowerCase().includes('crear') || 
                 obj.toLowerCase().includes('construir') ||
                 obj.toLowerCase().includes('robot') ||
                 obj.toLowerCase().includes('framework'))
            );

            if (qualityObjectives.length >= Math.max(1, objectives.length / 2)) {
                result.checks.push({
                    name: 'Objetivos de aprendizaje',
                    status: 'success',
                    message: `${objectives.length} objetivos bien definidos`
                });
                result.score += 15;
            } else {
                result.checks.push({
                    name: 'Objetivos de aprendizaje',
                    status: 'warning',
                    message: `${qualityObjectives.length}/${objectives.length} objetivos espec√≠ficos`
                });
                result.score += 8;
            }

            return result;
        }

        function validateContinuityEnhanced(lesson) {
            const result = {
                name: 'Continuidad Enhanced v13.1',
                status: 'success',
                checks: [],
                score: 0,
                maxScore: 25
            };

            const content = lesson.object.content || '';

            // Check for references to previous lessons (enhanced)
            const prevRefs = content.match(/lecci√≥n\s+(?:anterior|previa|\d+)/gi) || 
                           content.match(/lesson\s+\d+/gi) ||
                           content.match(/construye sobre|basado en|continuando/gi) ||
                           content.match(/en la lecci√≥n anterior|anteriormente/gi); // NUEVO

            if (prevRefs && prevRefs.length > 0) {
                result.checks.push({
                    name: 'Referencia a lecci√≥n anterior',
                    status: 'success',
                    message: `${prevRefs.length} referencias encontradas`
                });
                result.score += 10;
            } else {
                result.checks.push({
                    name: 'Referencia a lecci√≥n anterior',
                    status: 'warning',
                    message: 'No se encontraron referencias espec√≠ficas a lecciones anteriores'
                });
                result.score += 5;
            }

            // Check for next lesson preparation (enhanced)
            const nextRefs = content.match(/pr√≥xima.*lecci√≥n|siguiente.*lecci√≥n/gi) ||
                           content.match(/next.*lesson/gi) ||
                           content.match(/üöÄ.*siguiente|continuaremos|en el pr√≥ximo/gi); // NUEVO

            if (nextRefs && nextRefs.length > 0) {
                result.checks.push({
                    name: 'Preparaci√≥n pr√≥xima lecci√≥n',
                    status: 'success',
                    message: `${nextRefs.length} referencias al futuro`
                });
                result.score += 10;
            } else {
                result.checks.push({
                    name: 'Preparaci√≥n pr√≥xima lecci√≥n',
                    status: 'warning',
                    message: 'No se encontr√≥ preparaci√≥n para la siguiente lecci√≥n'
                });
                result.score += 5;
            }

            // NEW: Check for practical progression
            const progressionIndicators = content.match(/paso a paso|gradualmente|progresivamente/gi) ||
                                        content.match(/comenzamos.*terminamos|desde.*hasta/gi);

            if (progressionIndicators && progressionIndicators.length > 0) {
                result.checks.push({
                    name: 'Progresi√≥n did√°ctica',
                    status: 'success',
                    message: `Progresi√≥n clara detectada`
                });
                result.score += 5;
            } else {
                result.checks.push({
                    name: 'Progresi√≥n did√°ctica',
                    status: 'warning',
                    message: 'Mejorar indicadores de progresi√≥n'
                });
                result.score += 2;
            }

            return result;
        }

        function calculateOverallScore(results) {
            let totalScore = 0;
            let maxTotalScore = 0;

            Object.values(results.sections).forEach(section => {
                totalScore += section.score;
                maxTotalScore += section.maxScore;
            });

            results.score = totalScore;
            results.maxScore = maxTotalScore;
            
            const percentage = maxTotalScore > 0 ? (totalScore / maxTotalScore) * 100 : 0;
            const expectedScore = results.thresholds?.expectedScore || 85;
            
            if (percentage >= expectedScore) {
                results.overall = 'success';
            } else if (percentage >= (expectedScore - 15)) {
                results.overall = 'warning';
            } else {
                results.overall = 'error';
            }
        }

        function displayResults(results) {
            const container = document.getElementById('resultsContainer');
            container.style.display = 'block';

            const percentage = results.maxScore > 0 ? Math.round((results.score / results.maxScore) * 100) : 0;
            const lessonTitle = currentLesson.object.title || 'Lecci√≥n sin t√≠tulo';
            const lessonId = currentLesson.object.id || 'XXX';
            const thresholds = results.thresholds || { name: 'Est√°ndar', expectedScore: 85 };

            const expectedScore = thresholds.expectedScore;
            const meetsExpectation = percentage >= expectedScore;
            const isPromptUniversal = document.getElementById('promptUniversalMode').checked;

            container.innerHTML = `
                <div class="results-header ${results.overall}">
                    <div class="icon">
                        ${results.overall === 'success' ? 'üü¢' : results.overall === 'warning' ? 'üü°' : 'üî¥'}
                    </div>
                    <div>
                        <h2>${meetsExpectation ? 'PASSED' : 'NEEDS IMPROVEMENT'}: Lecci√≥n ${String(lessonId).padStart(3, '0')} - ${lessonTitle}</h2>
                        <p>Score: ${percentage}% (esperado: ${expectedScore}%+) - Formato: ${thresholds.name}</p>
                        <p><strong>PROMPT UNIVERSAL v13.1 ENHANCED:</strong> ${isPromptUniversal ? 'MODO ACTIVO' : 'MODO EST√ÅNDAR'} - Template simple optimizado</p>
                    </div>
                </div>

                <div class="stats-summary">
                    <h3>üéØ Validaci√≥n PROMPT UNIVERSAL ENHANCED - ${thresholds.level}</h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-number">${percentage}%</div>
                            <div class="stat-label">Score obtenido</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number">${expectedScore}%</div>
                            <div class="stat-label">Score esperado</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number">${thresholds.level}</div>
                            <div class="stat-label">Nivel detectado</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number">${Object.values(results.sections).filter(s => s.status === 'success').length}</div>
                            <div class="stat-label">Secciones OK</div>
                        </div>
                    </div>
                </div>

                <div class="results-content">
                    <div class="detailed-results">
                        ${Object.entries(results.sections).map(([key, section]) => `
                            <div class="collapsible">
                                <div class="collapsible-header" onclick="toggleCollapsible(this)">
                                    <span>${section.status === 'success' ? '‚úÖ' : section.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå'} ${section.name}</span>
                                    <span>${section.score}/${section.maxScore}</span>
                                </div>
                                <div class="collapsible-content">
                                    ${section.checks.map(check => `
                                        <div class="validation-item ${check.status}">
                                            <span class="icon">${check.status === 'success' ? '‚úÖ' : check.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå'}</span>
                                            <div>
                                                <strong>${check.name}:</strong> ${check.message}
                                                ${check.details ? `<br><small style="color: var(--text-muted);">${check.details}</small>` : ''}
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        `).join('')}
                    </div>

                    <div class="metrics-grid">
                        ${generateMetricsCards(currentLesson, results)}
                    </div>
                </div>

                ${generateActionItems(results)}
            `;

            // Auto-expand failed sections
            container.querySelectorAll('.collapsible').forEach(collapsible => {
                const header = collapsible.querySelector('.collapsible-header');
                const hasErrors = header.textContent.includes('‚ùå');
                if (hasErrors) {
                    toggleCollapsible(header);
                }
            });

            // Add enhanced export button
            setTimeout(addEnhancedExportButtonToResults, 100);
        }

        function generateMetricsCards(lesson, results) {
            const obj = lesson.object;
            const content = obj.content || '';
            const thresholds = results.thresholds;

            const robotLines = (content.match(/<pre><code class="robot">([\s\S]*?)<\/code><\/pre>/g) || [])
                .reduce((acc, match) => {
                    const codeContent = match.replace(/<[^>]*>/g, '');
                    return acc + codeContent.split('\n').filter(line => line.trim().length > 0).length;
                }, 0);

            const commands = (content.match(/robot\s+|mkdir\s+|ls\s+|cd\s+|echo\s+|python\s+|pip\s+|code\s+--/g) || []).length;
            const variables = ([...content.matchAll(/\\\\\\\\\$\{[^}]+\}|\$\{[^}]+\}/g)] || []).length;
            const practiceRatio = Math.round(((content.match(/üíª|üéØ|<pre><code|ejemplo|pr√°ctica/gi) || []).length / Math.max((content.match(/<h[1-6]>|<p>/g) || []).length, 1)) * 100);

            return `
                <div class="metric-card">
                    <div class="metric-value ${robotLines >= thresholds.minRobotLines ? 'success' : robotLines >= (thresholds.minRobotLines * 0.7) ? 'warning' : 'error'}">${robotLines}</div>
                    <div class="metric-label">L√≠neas RF (objetivo: ${thresholds.minRobotLines})</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value ${commands >= thresholds.minCommands ? 'success' : commands >= (thresholds.minCommands * 0.7) ? 'warning' : 'error'}">${commands}</div>
                    <div class="metric-label">Comandos (objetivo: ${thresholds.minCommands})</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value ${variables >= thresholds.minVariables ? 'success' : variables > 0 ? 'warning' : 'error'}">${variables}</div>
                    <div class="metric-label">Variables RF (objetivo: ${thresholds.minVariables})</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value ${practiceRatio >= thresholds.practiceRatio ? 'success' : practiceRatio >= (thresholds.practiceRatio - 15) ? 'warning' : 'error'}">${practiceRatio}%</div>
                    <div class="metric-label">Ratio Pr√°ctica (objetivo: ${thresholds.practiceRatio}%)</div>
                </div>
            `;
        }

        function generateActionItems(results) {
            const errors = [];
            const warnings = [];

            Object.values(results.sections).forEach(section => {
                section.checks.forEach(check => {
                    if (check.status === 'error') {
                        errors.push(check);
                    } else if (check.status === 'warning') {
                        warnings.push(check);
                    }
                });
            });

            const expectedScore = results.thresholds?.expectedScore || 85;
            const currentScore = results.maxScore > 0 ? Math.round((results.score / results.maxScore) * 100) : 0;
            const isPromptUniversal = document.getElementById('promptUniversalMode').checked;

            if (errors.length === 0 && warnings.length <= 2 && currentScore >= expectedScore) {
                return `
                    <div class="card" style="margin-top: 20px; background: rgba(22, 163, 74, 0.05); border-color: var(--success);">
                        <h3 style="color: var(--success);">üéâ ¬°Lecci√≥n PERFECTA para PROMPT UNIVERSAL v13.1 ENHANCED!</h3>
                        <p>Score: ${currentScore}% (esperado: ${expectedScore}%+) - Formato: ${results.thresholds?.level}</p>
                        <p><strong>‚úÖ Compatible con template simple | ‚úÖ AUTOEXTRAER funcionando | ‚úÖ Enhanced validations OK | ‚úÖ Lista para producci√≥n</strong></p>
                    </div>
                `;
            }

            return `
                <div class="card" style="margin-top: 20px;">
                    <h3>üîß Mejoras PROMPT UNIVERSAL v13.1 ENHANCED - ${results.thresholds?.level}</h3>
                    <p><strong>Score actual:</strong> ${currentScore}% | <strong>Objetivo:</strong> ${expectedScore}%+ | <strong>Modo:</strong> ${isPromptUniversal ? 'Universal' : 'Est√°ndar'}</p>
                    
                    ${errors.length > 0 ? `
                        <h4 style="color: var(--error); margin: 15px 0 10px;">‚ùå Errores cr√≠ticos:</h4>
                        <ul class="error-list">
                            ${errors.map(error => `
                                <li class="error-item">
                                    <strong>${error.name}:</strong> ${error.message}
                                    ${error.details ? `<br><small>${error.details}</small>` : ''}
                                </li>
                            `).join('')}
                        </ul>
                    ` : ''}
                    
                    ${warnings.length > 0 ? `
                        <h4 style="color: var(--warning); margin: 15px 0 10px;">‚ö†Ô∏è Optimizaciones sugeridas:</h4>
                        <ul class="error-list">
                            ${warnings.slice(0, 3).map(warning => `
                                <li class="error-item" style="background: rgba(217, 119, 6, 0.05); border-color: var(--warning);">
                                    <strong>${warning.name}:</strong> ${warning.message}
                                    ${warning.details ? `<br><small>${warning.details}</small>` : ''}
                                </li>
                            `).join('')}
                        </ul>
                    ` : ''}
                    
                    <div style="margin-top: 15px; padding: 15px; background: rgba(139, 92, 246, 0.1); border-radius: 8px;">
                        <h4 style="color: #8b5cf6;">üí° Tips PROMPT UNIVERSAL v13.1 ENHANCED:</h4>
                        <p>‚Ä¢ Usar "Generar lecci√≥n XXX usando curriculum-data.js y template simple"</p>
                        <p>‚Ä¢ AUTOEXTRAER extrae t√≠tulo, duraci√≥n, nivel autom√°ticamente</p>
                        <p>‚Ä¢ Template simple: directo al grano, m√°s pr√°ctica que teor√≠a</p>
                        <p>‚Ä¢ Dashboard export v13.1: autom√°tico con m√©tricas enhanced</p>
                    </div>
                </div>
            `;
        }

        function toggleCollapsible(header) {
            const content = header.nextElementSibling;
            const isActive = content.classList.contains('active');
            
            content.classList.toggle('active', !isActive);
            
            const arrow = header.querySelector('.arrow') || document.createElement('span');
            if (!header.querySelector('.arrow')) {
                arrow.className = 'arrow';
                arrow.textContent = '‚ñº';
                header.appendChild(arrow);
            }
            arrow.textContent = isActive ? '‚ñº' : '‚ñ≤';
        }

        function displayError(message) {
            const container = document.getElementById('resultsContainer');
            container.style.display = 'block';
            container.innerHTML = `
                <div class="results-header error">
                    <div class="icon">üî¥</div>
                    <div>
                        <h2>ERROR: No se pudo validar la lecci√≥n</h2>
                        <p>${message}</p>
                    </div>
                </div>
            `;
        }

        function showLoading(show) {
            const loading = document.getElementById('loading');
            loading.classList.toggle('active', show);
        }

        function clearResults() {
            document.getElementById('codeInput').value = '';
            document.getElementById('resultsContainer').style.display = 'none';
            currentLesson = null;
            validationResults = null;
            validationStartTime = null;
            resetUploadArea();
        }

        // ============================================================================
        // üìä ENHANCED EXPORT FUNCTIONALITY FROM v11 + v13.1 IMPROVEMENTS
        // Ruta Dashboard: 05. dashboard_v131_enhanced.html
        // ============================================================================

        function addEnhancedExportButtonToResults() {
            const resultsContainer = document.getElementById('resultsContainer');
            if (resultsContainer && resultsContainer.style.display !== 'none') {
                const existingButton = document.getElementById('exportToDashboardBtn');
                if (!existingButton) {
                    const exportButton = document.createElement('button');
                    exportButton.id = 'exportToDashboardBtn';
                    exportButton.innerHTML = 'üìä Exportar a Dashboard v13.1';
                    exportButton.className = 'btn btn-primary';
                    exportButton.style.cssText = `
                        margin: 20px auto;
                        display: block;
                        background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
                        border: none;
                        padding: 15px 30px;
                        font-size: 16px;
                        font-weight: 600;
                        border-radius: 8px;
                        cursor: pointer;
                        color: white;
                        transition: all 0.3s ease;
                        box-shadow: 0 4px 12px rgba(22, 163, 74, 0.25);
                    `;
                    
                    exportButton.onmouseover = () => {
                        exportButton.style.transform = 'translateY(-2px)';
                        exportButton.style.boxShadow = '0 6px 20px rgba(22, 163, 74, 0.35)';
                    };
                    
                    exportButton.onmouseout = () => {
                        exportButton.style.transform = 'translateY(0px)';
                        exportButton.style.boxShadow = '0 4px 12px rgba(22, 163, 74, 0.25)';
                    };
                    
                    exportButton.onclick = generateEnhancedDashboardExport;
                    
                    resultsContainer.appendChild(exportButton);
                }
            }
        }

        function generateEnhancedDashboardExport() {
            if (!currentLesson || !validationResults) {
                alert('Error: No hay lecci√≥n validada para exportar');
                return;
            }

            const lessonId = currentLesson.object.id || 'XXX';
            const score = validationResults.maxScore > 0 ? 
                Math.round((validationResults.score / validationResults.maxScore) * 100) : 0;
            
            // Calculate validation time in minutes
            const validationTimeMs = validationStartTime ? 
                (Date.now() - validationStartTime) : 0;
            const validationTime = Math.max(1, Math.round(validationTimeMs / 1000 / 60));
            
            // Determine iterations based on score vs expected
            const expectedScore = validationResults.thresholds?.expectedScore || 85;
            const iterations = score >= expectedScore ? 1 : 2;
            
            // Count critical issues (errors)
            const criticalIssues = Object.values(validationResults.sections)
                .reduce((count, section) => {
                    return count + section.checks.filter(check => check.status === 'error').length;
                }, 0);

            // Enhanced format for v13.1
            const exportLine = `L${String(lessonId).padStart(3, '0')}: ${score}% | ${validationTime}min | ${iterations}iter | ${criticalIssues}issues | v13.1 ENHANCED`;
            
            showEnhancedExportDialog(exportLine, lessonId, score, validationTime, iterations, criticalIssues);
        }

        function showEnhancedExportDialog(exportLine, lessonId, score, time, iterations, issues) {
            const modal = document.createElement('div');
            modal.className = 'export-modal';
            
            const modalContent = document.createElement('div');
            modalContent.className = 'export-modal-content';
            
            const isPromptUniversal = document.getElementById('promptUniversalMode').checked;
            const level = validationResults.thresholds?.level || 'B√ÅSICO-SIMPLE';
            const expectedScore = validationResults.thresholds?.expectedScore || 85;
            
            modalContent.innerHTML = `
                <h2 style="color: var(--success); margin-bottom: 20px; text-align: center;">
                    üìä Exportar Lecci√≥n ${String(lessonId).padStart(3, '0')} al Dashboard v13.1 ENHANCED
                </h2>
                
                <div style="background: linear-gradient(135deg, #16a34a 0%, #15803d 100%); color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                    <h3 style="margin-bottom: 10px;">‚úÖ Validaci√≥n PROMPT UNIVERSAL v13.1 Completada:</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 10px 0;">
                        <div><strong>üìä Score:</strong> ${score}%</div>
                        <div><strong>üéØ Esperado:</strong> ${expectedScore}%</div>
                        <div><strong>‚è±Ô∏è Tiempo:</strong> ${time} min</div>
                        <div><strong>üîÑ Iteraciones:</strong> ${iterations}</div>
                        <div><strong>üö® Issues:</strong> ${issues}</div>
                        <div><strong>üìã Nivel:</strong> ${level}</div>
                        <div><strong>‚ö° Modo:</strong> ${isPromptUniversal ? 'Universal' : 'Est√°ndar'}</div>
                        <div><strong>‚úÖ Estado:</strong> ${score >= expectedScore ? 'PASSED' : 'NEEDS WORK'}</div>
                    </div>
                </div>

                <div style="margin-bottom: 20px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 600; color: var(--primary);">
                        üìã Formato para Dashboard v13.1:
                    </label>
                    <textarea id="exportTextarea" class="export-textarea" rows="3">${exportLine}</textarea>
                </div>

                <div style="margin-bottom: 20px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 600; color: var(--primary);">
                        üí° Agregar notas ENHANCED (opcional):
                    </label>
                    <input type="text" id="exportNotes" class="export-input" placeholder="Ej: PROMPT UNIVERSAL funcionando, template simple OK, variables auto-detectadas">
                </div>

                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid var(--success);">
                    <h4 style="margin-bottom: 10px; color: var(--success);">üéØ M√©tricas ENHANCED v13.1:</h4>
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px; font-size: 14px;">
                        <div><strong>Secciones validadas:</strong> ${Object.keys(validationResults.sections).length}</div>
                        <div><strong>Validaciones OK:</strong> ${Object.values(validationResults.sections).filter(s => s.status === 'success').length}</div>
                        <div><strong>Compatibilidad:</strong> ${isPromptUniversal ? 'PROMPT UNIVERSAL' : 'EST√ÅNDAR'}</div>
                    </div>
                </div>

                <div style="text-align: center; display: flex; justify-content: center; flex-wrap: wrap; gap: 10px;">
                    <button id="copyBtn" class="export-btn export-btn-success">üìã Copiar al Portapapeles</button>
                    <button id="dashboardBtn" class="export-btn export-btn-primary">üöÄ Abrir Dashboard v13.1</button>
                    <button id="localStorageBtn" class="export-btn export-btn-primary">üíæ Guardar Local</button>
                    <button id="closeBtn" class="export-btn export-btn-secondary">‚ùå Cerrar</button>
                </div>
            `;
            
            modal.appendChild(modalContent);
            document.body.appendChild(modal);
            window.currentExportModal = modal;
            
            // Enhanced event listeners
            const textarea = modalContent.querySelector('#exportTextarea');
            const notesInput = modalContent.querySelector('#exportNotes');
            
            notesInput.addEventListener('input', function() {
                let currentText = exportLine;
                if (this.value.trim()) {
                    currentText += ` | Notas: ${this.value.trim()}`;
                }
                textarea.value = currentText;
            });
            
            modalContent.querySelector('#copyBtn').addEventListener('click', function() {
                textarea.select();
                textarea.setSelectionRange(0, 99999);
                
                // Try modern clipboard API first
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(textarea.value).then(() => {
                        this.innerHTML = '‚úÖ ¬°Copiado!';
                        this.style.background = '#059669';
                        setTimeout(() => {
                            this.innerHTML = 'üìã Copiar al Portapapeles';
                            this.style.background = 'var(--success)';
                        }, 2000);
                    });
                } else {
                    // Fallback
                    document.execCommand('copy');
                    this.innerHTML = '‚úÖ ¬°Copiado!';
                    this.style.background = '#059669';
                    setTimeout(() => {
                        this.innerHTML = 'üìã Copiar al Portapapeles';
                        this.style.background = 'var(--success)';
                    }, 2000);
                }
            });
            
            modalContent.querySelector('#dashboardBtn').addEventListener('click', function() {
                // Try to open dashboard v13.1 enhanced in new tab
                const currentPath = window.location.href;
                const dashboardPath = currentPath.replace(/[^\/]*\.html$/, '05. dashboard_v131_enhanced.html');
                window.open(dashboardPath, '_blank');
                
                // Show feedback
                this.innerHTML = '‚úÖ ¬°Abriendo Dashboard v13.1!';
                this.style.background = '#059669';
                setTimeout(() => {
                    this.innerHTML = 'üöÄ Abrir Dashboard v13.1';
                    this.style.background = 'var(--primary)';
                }, 2000);
            });

            // NEW: Local Storage functionality
            modalContent.querySelector('#localStorageBtn').addEventListener('click', function() {
                const dashboardData = {
                    lessonId: parseInt(lessonId),
                    score: score,
                    time: time,
                    iterations: iterations,
                    issues: issues,
                    notes: `v13.1 ENHANCED ${level} | Prompt Universal: ${isPromptUniversal ? 'ON' : 'OFF'} | Score: ${score}%`,
                    date: new Date().toISOString().split('T')[0],
                    v131Enhanced: true,
                    promptUniversal: isPromptUniversal,
                    level: level,
                    expectedScore: expectedScore
                };
                
                // Save to localStorage for dashboard v13.1 enhanced
                const existingData = JSON.parse(localStorage.getItem('rfAcademyLessonsV131Enhanced') || '[]');
                const existingIndex = existingData.findIndex(l => l.lessonId === dashboardData.lessonId);
                
                if (existingIndex >= 0) {
                    existingData[existingIndex] = dashboardData;
                } else {
                    existingData.push(dashboardData);
                }
                
                localStorage.setItem('rfAcademyLessonsV131Enhanced', JSON.stringify(existingData));
                
                this.innerHTML = '‚úÖ ¬°Guardado!';
                this.style.background = '#059669';
                setTimeout(() => {
                    this.innerHTML = 'üíæ Guardar Local';
                    this.style.background = 'var(--primary)';
                }, 2000);
            });
            
            modalContent.querySelector('#closeBtn').addEventListener('click', closeEnhancedExportDialog);
            
            // Close on background click
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeEnhancedExportDialog();
                }
            });
        }

        function closeEnhancedExportDialog() {
            if (window.currentExportModal) {
                document.body.removeChild(window.currentExportModal);
                window.currentExportModal = null;
            }
        }

        // ============================================================================
        // END ENHANCED EXPORT FUNCTIONALITY
        // ============================================================================

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üîç RF Academy Validador v13.1 ENHANCED - PROMPT UNIVERSAL + DASHBOARD EXPORT iniciado');
            console.log('‚ö° Umbrales optimizados para template simple y AUTOEXTRAER');
            console.log('üéØ Compatible con: "Generar lecci√≥n XXX usando curriculum-data.js y template simple"');
            console.log('üìä Export functionality ENHANCED from v11 with v13.1 improvements');
            console.log('üöÄ Dashboard path: 05. dashboard_v131_enhanced.html');
            initializeEventListeners();
        });
    </script>
</body>
</html>