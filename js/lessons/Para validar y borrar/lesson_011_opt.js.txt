/**
 * Robot Framework Academy - Lesson 011 OPTIMIZED
 * Git y TortoiseGit para QA Engineers
 */

const LESSON_011 = {
    id: 11,
    title: "Git y TortoiseGit para QA Engineers",
    duration: "8 min",
    level: "beginner",
    section: "section-01",
    type: "foundation",
    content: `
        <h2>üêô Git TortoiseGit QA</h2>
        <p>Control visual versiones QA Engineers. DIFF-COMMIT-PUSH = workflow diario.</p>
        
        <h3>ü§ñ Tests Git workflow:</h3>
        <pre><code class="robot">*** Variables ***
\${TEST_FILE}         login_test.robot
\${COMMIT_MESSAGE}    QA: Added login automation
\${REMOTE_REPO}       origin
\${WORKFLOW_STEP}     1
\${FILES_STAGED}      3
\${CHANGES_FOUND}     True
\${PUSH_SUCCESS}      True
\${DIFF_STATUS}       True

*** Test Cases ***
Test DIFF Command QA
    [Documentation]    Comando diario #1 para QA Engineers
    Log                    üîç DIFF: Comparando cambios tests
    Should Not Be Empty    \${TEST_FILE}
    Should Contain         \${TEST_FILE}    test
    Should Be Equal        \${TEST_FILE}    login_test.robot
    Should Be True         \${CHANGES_FOUND}
    Should Be Equal        \${CHANGES_FOUND}    True
    Should Not Be Empty    \${CHANGES_FOUND}
    Should Contain         \${TEST_FILE}    login
    Should Be Equal        login_test.robot    login_test.robot
    Should Not Be Empty    login_test.robot
    Should Contain         Right-click TortoiseGit Diff    Diff
    Log                    ‚úÖ DIFF: Cambios visualizados

Test COMMIT Command QA
    [Documentation]    Comando diario #2 para QA Engineers  
    Log                    üíæ COMMIT: Guardando versi√≥n tests
    Should Not Be Empty    \${COMMIT_MESSAGE}
    Should Contain         \${COMMIT_MESSAGE}    QA:
    Should Be Equal        \${COMMIT_MESSAGE}    QA: Added login automation
    Should Be True         \${FILES_STAGED} > 0
    Should Be Equal As Numbers    \${FILES_STAGED}    3
    Should Not Be Empty    \${FILES_STAGED}
    Should Contain         \${COMMIT_MESSAGE}    Added
    Should Be Equal        QA: Added login automation    QA: Added login automation
    Should Not Be Empty    QA: Added login automation
    Should Contain         Right-click TortoiseGit Commit    Commit
    Log                    ‚úÖ COMMIT: Versi√≥n guardada

Test PUSH Command QA
    [Documentation]    Comando diario #3 para QA Engineers
    Log                    üöÄ PUSH: Compartiendo tests equipo
    Should Not Be Empty    \${REMOTE_REPO}
    Should Contain         \${REMOTE_REPO}    origin
    Should Be Equal        \${REMOTE_REPO}    origin
    Should Be True         \${PUSH_SUCCESS}
    Should Be Equal        \${PUSH_SUCCESS}    True
    Should Not Be Empty    \${PUSH_SUCCESS}
    Should Contain         origin    origin
    Should Be Equal        origin    origin
    Should Not Be Empty    origin
    Should Contain         Right-click TortoiseGit Push    Push
    Log                    ‚úÖ PUSH: Tests disponibles equipo

Test Workflow DIFF-COMMIT-PUSH
    [Documentation]    Workflow diario completo QA Engineers
    Log                    üîÑ Workflow diario QA completo
    Should Not Be Empty    \${WORKFLOW_STEP}
    Should Be Equal As Numbers    \${WORKFLOW_STEP}    1
    Should Be True         \${WORKFLOW_STEP} > 0
    
    # Validar DIFF
    Should Be True         \${DIFF_STATUS}
    Should Be Equal        \${DIFF_STATUS}    True
    Should Not Be Empty    \${DIFF_STATUS}
    
    # Validar COMMIT
    Should Not Be Empty    \${COMMIT_MESSAGE}
    Should Contain         \${COMMIT_MESSAGE}    QA:
    Should Be Equal        \${COMMIT_MESSAGE}    QA: Added login automation
    
    # Validar PUSH
    Should Be True         \${PUSH_SUCCESS}
    Should Be Equal        \${PUSH_SUCCESS}    True
    Should Not Be Empty    \${PUSH_SUCCESS}
    
    # Workflow completo
    Should Be Equal As Numbers    3    3
    Should Be True         3 > 0
    Should Not Be Empty    3
    Log                    ‚úÖ Workflow QA: DIFF‚ÜíCOMMIT‚ÜíPUSH

Test Git Commands Validation
    [Documentation]    Validaci√≥n comandos Git esenciales
    Log                    üõ†Ô∏è Validando comandos Git QA
    Should Contain         git status    status
    Should Contain         git add    add
    Should Contain         git commit    commit
    Should Contain         git push    push
    Should Contain         git pull    pull
    Should Not Be Empty    git status
    Should Not Be Empty    git add
    Should Not Be Empty    git commit
    Should Not Be Empty    git push
    Should Not Be Empty    git pull
    Should Be Equal        git status    git status
    Should Be Equal        git add    git add
    Should Be Equal        git commit    git commit
    Should Be Equal        git push    git push
    Should Be Equal        git pull    git pull
    Log                    ‚úÖ Comandos Git validados

Test TortoiseGit Interface
    [Documentation]    Validaci√≥n interfaz TortoiseGit
    Log                    üñ±Ô∏è Validando interfaz TortoiseGit
    Should Contain         Right-click    Right
    Should Contain         TortoiseGit    Tortoise
    Should Contain         TortoiseGit    Git
    Should Not Be Empty    Right-click
    Should Not Be Empty    TortoiseGit
    Should Be Equal        Right-click    Right-click
    Should Be Equal        TortoiseGit    TortoiseGit
    Should Contain         Visual interface    Visual
    Should Contain         GUI workflow    GUI
    Should Not Be Empty    Visual interface
    Should Not Be Empty    GUI workflow
    Should Be Equal        Visual interface    Visual interface
    Should Be Equal        GUI workflow    GUI workflow
    Log                    ‚úÖ Interfaz TortoiseGit validada</code></pre>
        
        <h3>üéØ Pr√°ctica Git QA (6 min):</h3>
        <p>1. Instalar TortoiseGit: tortoisegit.org ‚Üí Download ‚Üí Install</p>
        <p>2. Configurar QA: Right-click ‚Üí Settings ‚Üí Name: "QA Engineer"</p>
        <p>3. Crear repo: New Folder "robot-qa-tests" ‚Üí Git Create Repository</p>
        <p>4. Crear test: login_test.robot con c√≥digo Robot Framework</p>
        <p>5. **DIFF**: Modificar test ‚Üí Right-click ‚Üí TortoiseGit ‚Üí **Diff**</p>
        <p>6. Interpretar: **Rojo=eliminado**, **Verde=agregado**</p>
        <p>7. **COMMIT**: Right-click ‚Üí TortoiseGit ‚Üí **Commit** ‚Üí "QA: Added login"</p>
        <p>8. Mensaje formato: **"QA: [Acci√≥n] [Descripci√≥n]"**</p>
        <p>9. Ver historial: Right-click ‚Üí Show Log ‚Üí Ver commits</p>
        <p>10. Crear logout_test.robot ‚Üí DIFF diferencias</p>
        <p>11. Commit m√∫ltiple: Select files ‚Üí COMMIT mensaje QA</p>
        <p>12. **PUSH**: Right-click ‚Üí TortoiseGit ‚Üí **Push** ‚Üí Remote</p>
        <p>13. Configurar remote: Push ‚Üí Set URL GitHub/GitLab</p>
        <p>14. Push exitoso: Verificar "Success" ‚Üí Tests en equipo</p>
        <p>15. Pull actualizar: Right-click ‚Üí Pull ‚Üí Bajar cambios equipo</p>
        <p>16. Workflow diario: **DIFF** ‚Üí **COMMIT** ‚Üí **PUSH** ‚Üí Repetir</p>
        <p>17. Resolver conflictos: TortoiseGit ‚Üí Resolve ‚Üí Merge manual</p>
        <p>18. Branch QA: Switch/Checkout ‚Üí Create "feature/new-tests"</p>

        <h3>üí° Tip</h3>
        <p>DIFF antes commit = evitar c√≥digo roto. PUSH diario = equipo sync</p>
        
        <h3>üöÄ Siguiente</h3>
        <p>Lecci√≥n 012: Configuraci√≥n requirements.txt</p>
    `,
    topics: ["git", "tortoisegit", "qa-automation", "diff-commit-push"],
    hasCode: true,
    hasExercise: true,
    type: "foundation"
};